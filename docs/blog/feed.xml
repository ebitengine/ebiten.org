<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ebiten Blog</title>
  <id>https://ebiten.org/blog/</id>
  <link rel="self" href="https://ebiten.org/blog/feed.xml"></link>
  <updated>2022-05-26T00:00:00+09:00</updated>
  <author>
    <name>Hajime Hoshi</name>
    <uri>https://hajimehoshi.com</uri>
    <email>hajimehoshi@gmail.com</email>
  </author>
  <entry>
    <title>We renamed Ebiten to Ebitengine</title>
    <id>https://ebiten.org/blog/ebitengine.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/ebitengine.html"></link>
    <published>2022-05-26T00:00:00+09:00</published>
    <updated>2022-05-26T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h1&gt;We renamed Ebiten to Ebitengine&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2022-05-26&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;p&gt;In order to make our engine more unique, we have decided to rename Ebiten to Ebitengine! Ebitengine is &lt;a href=&#34;https://en.wikipedia.org/wiki/Portmanteau&#34;&gt;a portmanteau&lt;/a&gt; of an Ebiten and an Engine, and is pronounced like Ebi-Ten-Gin.&lt;/p&gt;&#xA;  &lt;p&gt;We don&#39;t change the website URL and the GitHub repository names. You never have to change your source code.&lt;/p&gt;&#xA;  &lt;p&gt;Thank you for your continuous support!&lt;/p&gt;&#xA;  &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/ebitengine/ebitengine.png&#34;&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h1&gt;Ebiten を Ebitengine に名称変更しました&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2022-05-26&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;p&gt;我々のエンジンをよりユニークにするため、エンジンの名前を Ebiten から Ebitengine (エビテンジン) に変更いたしました! Ebitengine は Ebiten と Engine の&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%81%8B%E3%81%B0%E3%82%93%E8%AA%9E&#34;&gt;かばん語&lt;/a&gt;です。&lt;/p&gt;&#xA;  &lt;p&gt;Web サイトの URL や GitHub リポジトリ名には変更ありません。ソースコードを変更する必要は一切ありません。&lt;/p&gt;&#xA;  &lt;p&gt;今後ともどうぞよろしくお願い致します。&lt;/p&gt;&#xA;  &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/ebitengine/ebitengine.png&#34;&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;</content>
  </entry>
  <entry>
    <title>v2.3.0 is released</title>
    <id>https://ebiten.org/blog/v2.3.0.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/v2.3.0.html"></link>
    <published>2022-04-26T00:00:00+09:00</published>
    <updated>2022-04-26T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h1&gt;v2.3.0 is released&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2022-04-26&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;p&gt;I am very happy to announce the release of v2.3.0 (&lt;a href=&#34;/documents/2.3.html&#34;&gt;Release Note&lt;/a&gt;).&lt;/p&gt;&#xA;  &lt;p&gt;I appreciate all the contributors and &lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;all the sponsors&lt;/a&gt;. Thank you very much!&lt;/p&gt;&#xA;  &lt;p&gt;v2.3.0 includes these new features:&lt;/p&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.3.html#DirectX_on_Windows&#34;&gt;Supporting DirectX on Windows&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.3.html#Native_compile_for_Nintendo_Switch™&#34;&gt;Native compile for Nintendo Switch™&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.3.html#A_build_tag_ebitenexternaldll&#34;&gt;A build tag &lt;code&gt;ebitenexternaldll&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.3.html#Vibration&#34;&gt;Device vibration&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.3.html#Real-time_PCM&#34;&gt;Real-time PCM&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;etc.&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;p&gt;v2.3.0 also improves performance in terms of speed and memory usage.&lt;/p&gt;&#xA;  &lt;p&gt;I appreciate your feedbacks!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h1&gt;v2.3.0 がリリースされました&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2022-04-26&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;p&gt;v2.3.0 がリリースされました! 詳しくは&lt;a href=&#34;/documents/2.3.html&#34;&gt;リリースノート&lt;/a&gt;を参照してください。&lt;/p&gt;&#xA;  &lt;p&gt;すべてのコントリビューターと&lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;スポンサーの皆様&lt;/a&gt;に感謝いたします。どうもありがとうございます!&lt;/p&gt;&#xA;  &lt;p&gt;v2.3.0 に入った新しい機能は次のとおりです:&lt;/p&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.3.html#Windows_での_DirectX_サポート&#34;&gt;Windows の DirectX サポート&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.3.html#Nintendo_Switch™_向けのネイティブコンパイル&#34;&gt;Nintendo Switch™ 向けネイティブコンパイル&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.3.html#ビルドタグ_ebitenexternaldll&#34;&gt;ビルドタグ &lt;code&gt;ebitenexternaldll&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.3.html#バイブレーション&#34;&gt;デバイスのバイブレーション&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.3.html#リアルタイム_PCM&#34;&gt;リアルタイム PCM&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;その他&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;p&gt;v2.3.0 で、スピードやメモリ使用量などのパフォーマンス改善も行いました。&lt;/p&gt;&#xA;  &lt;p&gt;フィードバックお待ちしております!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;</content>
  </entry>
  <entry>
    <title>Compiling a Go program into a native binary for Nintendo Switch™</title>
    <id>https://ebiten.org/blog/native_compiling_for_nintendo_switch.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/native_compiling_for_nintendo_switch.html"></link>
    <published>2022-01-03T00:00:00+09:00</published>
    <updated>2022-01-03T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;div&gt;&#xA;  &lt;h1&gt;Compiling a Go program into a native binary for Nintendo Switch™&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2022-01-03&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;p&gt;This is an English translation of &lt;a href=&#34;https://zenn.dev/hajimehoshi/articles/72f027db464280&#34;&gt;my article in Japanese&lt;/a&gt;.&lt;/p&gt;&#xA;  &lt;h2&gt;tl;dr&lt;/h2&gt;&#xA;  &lt;p&gt;Previously, we compiled a Go program into a WebAssembly and then converted it into C++ files to make it run on Nintendo Switch. Now, I have succeeded in compiling a Go program into a native binary for Nintendo Switch, and also running a game there. I replaced system calls with C function calls using the &lt;code&gt;-overlay&lt;/code&gt; option. Also, I have developed a new package &lt;a href=&#34;https://github.com/hajimehoshi/hitsumabushi&#34;&gt;Hitsumabushi&lt;/a&gt; to generate JSON content for this.&lt;/p&gt;&#xA;  &lt;h2&gt;Caution&lt;/h2&gt;&#xA;  &lt;p&gt;This article and the open-source projects in this article are based only on publicly available information. Hajime is responsible for this article&#39;s content. Please do not ask Nintendo about this article.&lt;/p&gt;&#xA;  &lt;h2&gt;Background&lt;/h2&gt;&#xA;  &lt;p&gt;I have been developing a 2D game engine called Ebiten in my spare time. I have succeeded in porting this to Nintendo Switch and &lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/en.html&#34;&gt;the Nintendo Switch version of &#34;Bear&#39;s Restaurant&#34;&lt;/a&gt; was released in 2021.&lt;/p&gt;&#xA;  &lt;figure&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/&#34;&gt;&lt;img src=&#34;/images/blog/nintendo_switch/bearsrestaurant_en.jpg&#34; width=&#34;360&#34; alt=&#34;Bear&#39;s Restaurant&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;    &lt;figcaption&gt;Copyright 2021 Odencat Inc.&lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;  &lt;p&gt;The method was to compile a Go program into a WebAssembly (Wasm) binary and then convert it to C++ files. See &lt;a href=&#34;https://docs.google.com/presentation/d/e/2PACX-1vTMRSmuWjhpOx3DIgetfi72jcOGvlqPU5z0Nps24YN6dxaBbu4dWm0FXS2f--D4G2b1aAvTmfqNA2IG/pub?start=false&amp;loop=false&amp;delayms=3000&#34;&gt;the presentation slides from GoConference 2021 Autumn&lt;/a&gt; for more details. The advantages were low uncertainty, low maintenance cost, and high portability. Once I developed the tool, its maintenance cost was pretty small as Wasm&#39;s specification is stable. On the other hand, the disadvantages were bad performance and long compiling time. Not only that performance was worse than native, but GC also suspended the game due to a single thread.&lt;/p&gt;&#xA;  &lt;p&gt;Compiling a Go program into a native binary for Nintendo Switch without using Wasm was quite uncertain and a rocky road. Of course, Go doesn&#39;t support Nintendo Switch officially. And naturally, Nintendo Switch&#39;s source code and binary formats are not open. Even if I hit an issue, it&#39;d be possible that there would not be any clues to help me solve it. However, if I knew that I were to succeed, performance would be better than ever, and compiling speed would be as fast as Go. So I thought it was worth a shot and have been doing some experiments intermittently for one year.&lt;/p&gt;&#xA;  &lt;h2&gt;Strategy&lt;/h2&gt;&#xA;  &lt;p&gt;The strategy is basically to replace system calls with C function calls in the runtime and the standard library. The system calls part is OS-dependent, and if I replace it with something portable, Go should work everywhere in theory. It seems pretty easy, doesn&#39;t it? Well, it was a lot more challenging than I expected...&lt;/p&gt;&#xA;  &lt;p&gt;The graphic below describes what I had to do. The left side is a structure of a structural overview of standard Go compiling. System calls work on specific systems and of course, this doesn&#39;t work on Nintendo Switch. So I had to replace them with standard C function calls like the right side.&lt;/p&gt;&#xA;  &lt;figure&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/native_compiling_for_nintendo_switch/strategy.png&#34; alt=&#34;Replacing system calls with C function calls&#34;&gt;&lt;/p&gt;&#xA;    &lt;figcaption&gt;Replacing system calls with C function calls&lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;  &lt;p&gt;And, there is another action item to adjust the binary format that the Go compiler generates to fit with Nintendo Switch. So in summary, the action items were as follows:&lt;/p&gt;&#xA;  &lt;ol&gt;&#xA;    &lt;li&gt;Replacing system calls with standard C function and/or pthread function calls&lt;/li&gt;&#xA;    &lt;li&gt;Adjust the ELF format that the Go compiler generates&lt;/li&gt;&#xA;  &lt;/ol&gt;&#xA;  &lt;p&gt;For replacing system calls, of course, system calls do not correspond one-to-one with C functions. And, there are too many system calls to implement. So, I replaced system calls one by one by finding which ones refused to work on an actual Nintendo Switch device.&lt;/p&gt;&#xA;  &lt;p&gt;The Go compiler can generate only formats that the Go compiler officially supports. For example, when a target is Linux, the format is ELF. Can Nintendo Switch support ELF? To make a long story short, yes, I managed it. I won&#39;t describe the details about 2. here&lt;a href=&#34;#footnote_1&#34;&gt;*1&lt;/a&gt;.&lt;/p&gt;&#xA;  &lt;p&gt;What I have to do is create a &lt;code&gt;.a&lt;/code&gt; file via the Go compiler with &lt;code&gt;GOOS=linux GOARCH=arm64&lt;/code&gt; and &lt;code&gt;-buildmode=c-archive&lt;/code&gt;, and then link it with other object files and libraries via Nintendo Switch compiler. The reason why I don&#39;t use &lt;code&gt;-buildmode=default&lt;/code&gt; is that there are some items I have to do around an entry point. IMO, in general, it is more portable to depend on the platform for an entry point.&lt;/p&gt;&#xA;  &lt;p&gt;System calls are defined basically in the standard library, especially &lt;code&gt;runtime&lt;/code&gt; and &lt;code&gt;syscall&lt;/code&gt; packages. So, how did I rewrite them? In this project, I adopted the &lt;code&gt;-overlay&lt;/code&gt; option.&lt;/p&gt;&#xA;  &lt;h2&gt;Hitsumabushi - rewriting the runtime with the &lt;code&gt;-overlay&lt;/code&gt; option&lt;/h2&gt;&#xA;  &lt;p&gt;&lt;code&gt;go build&lt;/code&gt;&#39;s &lt;code&gt;-overlay&lt;/code&gt; is an option that overwrites Go files to be compiled. I overwrote Go files in the runtime with this option. This is &lt;a href=&#34;https://pkg.go.dev/cmd/go&#34;&gt;the official document&#39;s explanation&lt;/a&gt;:&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;-overlay file&#xA;    read a JSON config file that provides an overlay for build operations.&#xA;    The file is a JSON struct with a single field, named &#39;Replace&#39;, that&#xA;    maps each disk file path (a string) to its backing file path, so that&#xA;    a build will run as if the disk file path exists with the contents&#xA;    given by the backing file paths, or as if the disk file path does not&#xA;    exist if its backing file path is empty. Support for the -overlay flag&#xA;    has some limitations: importantly, cgo files included from outside the&#xA;    include path must be in the same directory as the Go package they are&#xA;    included from, and overlays will not appear when binaries and tests are&#xA;    run through go run and go test respectively.&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;This is the format to give &lt;code&gt;-overlay&lt;/code&gt;:&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;{&#xA;  &#34;Replace&#34;: {&#xA;    &#34;/usr/local/go/src/runtime/os_linux.go&#34;: &#34;/home/hajimehoshi/my_os_linux.go&#34;&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;If you build a Go program with this, &lt;code&gt;os_linux.go&lt;/code&gt;&#39;s content in &lt;code&gt;runtime&lt;/code&gt; is replaced with &lt;code&gt;my_os_linux.go&lt;/code&gt;&#39;s. Pretty handy, isn’t it?&lt;/p&gt;&#xA;  &lt;p&gt;Managing this JSON file as it is is not portable. A location where Go is installed depends on environments, and then the target files&#39; locations vary. Plus, you very rarely have to replace the full contents of a file, and in most cases, it is enough to replace some functions. As such, it is troublesome to update source files to match each Go version update.&lt;/p&gt;&#xA;  &lt;p&gt;So, I developed a new package to generate a JSON for this project. This is &lt;a href=&#34;https://github.com/hajimehoshi/hitsumabushi&#34;&gt;Hitsumabushi (ひつまぶし)&lt;/a&gt;&lt;a href=&#34;#footnote_2&#34;&gt;*2&lt;/a&gt;. I adopted this name because I wanted a name ending with &#39;bushi&#39; as a play on libc (ree-boo-shee (りぶしー) in Japanese pronunciation), because this is one of the primary things that Hitsumabushi deals with. There was another candidate I was considering, Katsuobushi (かつおぶし)&lt;a href=&#34;#footnote_3&#34;&gt;*3&lt;/a&gt;, but I won’t get into that...&lt;/p&gt;&#xA;  &lt;p&gt;Hitsumabushi is a very simple package defining an API like this:&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;// GenOverlayJSON generates JSON content that can be passed&#xA;// to -overlay based on the given options, or returns an error&#xA;// when an error occurs.&#xA;//&#xA;// There are some options like specifying command arguments&#xA;// and specifying the number of CPU.&#xA;func GenOverlayJSON(options ...Option) ([]byte, error)&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;h2&gt;Implementation of Hitsumabushi&lt;/h2&gt;&#xA;  &lt;p&gt;I have created an original patch format for Hitsumabushi that looks like this:&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;//--from&#xA;func getRandomData(r []byte) {&#xA;    if startupRandomData != nil {&#xA;        n := copy(r, startupRandomData)&#xA;        extendRandom(r, n)&#xA;        return&#xA;    }&#xA;    fd := open(&amp;urandom_dev[0], 0 /* O_RDONLY */, 0)&#xA;    n := read(fd, unsafe.Pointer(&amp;r[0]), int32(len(r)))&#xA;    closefd(fd)&#xA;    extendRandom(r, int(n))&#xA;}&#xA;//--to&#xA;// Use getRandomData in os_plan9.go.&#xA;&#xA;//go:nosplit&#xA;func getRandomData(r []byte) {&#xA;    // inspired by wyrand see hash32.go for detail&#xA;    t := nanotime()&#xA;    v := getg().m.procid ^ uint64(t)&#xA;&#xA;    for len(r) &amp;gt; 0 {&#xA;        v ^= 0xa0761d6478bd642f&#xA;        v *= 0xe7037ed1a0b428db&#xA;        size := 8&#xA;        if len(r) &amp;lt; 8 {&#xA;            size = len(r)&#xA;        }&#xA;        for i := 0; i &amp;lt; size; i++ {&#xA;            r[i] = byte(v &amp;gt;&amp;gt; (8 * i))&#xA;        }&#xA;        r = r[size:]&#xA;        v = v&amp;gt;&amp;gt;32 | v&amp;lt;&amp;lt;32&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;The part after &lt;code&gt;//--from&lt;/code&gt; and the part after &lt;code&gt;//--to&lt;/code&gt; represent a replacing source and a target respectively. The reason why I invented my simple format is that the existing patch formats don&#39;t assume to be modified by a human being. In the above example, Linux&#39;s &lt;code&gt;getRandomData&lt;/code&gt; implementation is replaced with Plan 9&#39;s. Linux&#39;s &lt;code&gt;getRandomData&lt;/code&gt; uses &lt;code&gt;/dev/urandom&lt;/code&gt; and this is not portable&lt;a href=&#34;#footnote_4&#34;&gt;*4&lt;/a&gt;. This patch format saves some amount of work to manage the differences I want to replace. Of course, the cost to keep up with the Go version updates doesn&#39;t become zero even with this, but it should help a lot.&lt;/p&gt;&#xA;  &lt;p&gt;Hitsumabushi creates modified files with this format and puts them in a temporary directory. It uses the files as the content of JSON (the replacing source file names).&lt;/p&gt;&#xA;  &lt;p&gt;Note that Hitsumabushi rewrites the standard library and the runtime, and the Go compiler is not the target to rewrite. In other words, the regular Go compiler is used as is.&lt;/p&gt;&#xA;  &lt;p&gt;The replacements by Hitsumabushi are only the standard C function calls and pthread function calls. It never deals with platform-specific APIs&lt;a href=&#34;#footnote_5&#34;&gt;*5&lt;/a&gt;. So, ideally, &lt;strong&gt;Hitsumabushi should enable a Go program to run on any platform, regardless of whether or not the Go compiler originally supports it&lt;/strong&gt;.&lt;/p&gt;&#xA;  &lt;h2&gt;Replacements&lt;/h2&gt;&#xA;  &lt;h3&gt;Calling C functions from &lt;code&gt;runtime&lt;/code&gt;&lt;/h3&gt;&#xA;  &lt;p&gt;It is not an easy task to call a C function from &lt;code&gt;runtime&lt;/code&gt;. In a usual Go program, you can call a C function easily with Cgo. However, &lt;code&gt;runtime&lt;/code&gt; cannot use Cgo. Using Cgo means to depend on &lt;code&gt;runtime/cgo&lt;/code&gt;, and &lt;code&gt;runtime/cgo&lt;/code&gt; depends on &lt;code&gt;runtime&lt;/code&gt;, so this would be a circular dependency.&lt;/p&gt;&#xA;  &lt;p&gt;To get straight to the point, &lt;code&gt;libcCall&lt;/code&gt; makes it possible to call a C function from &lt;code&gt;runtime&lt;/code&gt;. Some environments like &lt;code&gt;GOOS=darwin&lt;/code&gt; already do this.&lt;/p&gt;&#xA;  &lt;p&gt;In addition, &lt;a href=&#34;https://pkg.go.dev/cmd/compile#hdr-Compiler_Directives&#34;&gt;various compiler directives&lt;/a&gt; are required.&lt;/p&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;code&gt;//go:nosplit&lt;/code&gt;: Skips an overflow in the stack.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;code&gt;//go:cgo_unsafe_args&lt;/code&gt;: Treats Go arguments as C arguments.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;code&gt;//go:linkname&lt;/code&gt;: Treats something defined in another package as if it was defined in this package. Or, it treats something defined in this package as if it was defined in another package. It ignores whether the symbol is exported or not. Very useful!&lt;/li&gt;&#xA;    &lt;li&gt;&lt;code&gt;//go:cgo_import_static&lt;/code&gt;: Static-links a C function and makes it possible to treat the symbol value in Go.&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;p&gt;Let&#39;s see an actual example. To call the &lt;code&gt;write&lt;/code&gt; system call from &lt;code&gt;runtime&lt;/code&gt;, a function called &lt;code&gt;write1&lt;/code&gt; is defined on the Go side.&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;// An excerpt from runtime/stubs2.go in Go 1.17.5&#xA;&#xA;//go:noescape&#xA;func write1(fd uintptr, p unsafe.Pointer, n int32) int32&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;pre&gt;&lt;code&gt;// An excerpt from runtime/sys_linux_arm64.s in Go 1.17.5&#xA;&#xA;TEXT runtime·write1(SB),NOSPLIT|NOFRAME,$0-28&#xA;    MOVD    fd+0(FP), R0&#xA;    MOVD    p+8(FP), R1&#xA;    MOVW    n+16(FP), R2&#xA;    MOVD    $SYS_write, R8&#xA;    SVC&#xA;    MOVW    R0, ret+24(FP)&#xA;    RET&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;In the case of 64bit ARM, &lt;code&gt;SVC&lt;/code&gt; is used to invoke a system call.&lt;/p&gt;&#xA;  &lt;p&gt;Let&#39;s replace this with a C function call by &lt;code&gt;libcCall&lt;/code&gt; and compiler directives.&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;// An excerpt from runtime/stubs2.go after Hitsumabushi&#39;s replacement&#xA;&#xA;//go:nosplit&#xA;//go:cgo_unsafe_args&#xA;func write1(fd uintptr, p unsafe.Pointer, n int32) int32 {&#xA;    return libcCall(unsafe.Pointer(abi.FuncPCABI0(write1_trampoline)), unsafe.Pointer(&amp;fd))&#xA;}&#xA;func write1_trampoline(fd uintptr, p unsafe.Pointer, n int32) int32&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;pre&gt;&lt;code&gt;// An excerpt from runtime/os_linux.go after Hitsumabushi&#39;s replacement&#xA;&#xA;//go:linkname c_write1 c_write1&#xA;//go:cgo_import_static c_write1&#xA;var c_write1 byte&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;pre&gt;&lt;code&gt;// An excerpt from runtime/sys_linux_arm64.s after Hitsumabushi&#39;s replacement&#xA;&#xA;TEXT runtime·write1_trampoline(SB),NOSPLIT,$0-28&#xA;    MOVD    8(R0), R1   // p&#xA;    MOVW    16(R0), R2  // n&#xA;    MOVD    0(R0), R0   // fd&#xA;    BL  c_write1(SB)&#xA;    RET&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;pre&gt;&lt;code&gt;// An excerpt from runtime/cgo/gcc_linux_arm64.c after Hitsumabushi&#39;s replacement&#xA;&#xA;int32_t c_write1(uintptr_t fd, void *p, int32_t n) {&#xA;  static pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;&#xA;  int32_t ret = 0;&#xA;  pthread_mutex_lock(&amp;m);&#xA;  switch (fd) {&#xA;  case 1:&#xA;    ret = fwrite(p, 1, n, stdout);&#xA;    fflush(stdout);&#xA;    break;&#xA;  case 2:&#xA;    ret = fwrite(p, 1, n, stderr);&#xA;    fflush(stderr);&#xA;    break;&#xA;  default:&#xA;    fprintf(stderr, &#34;syscall write(%lu, %p, %d) is not implemented\n&#34;, fd, p, n);&#xA;    break;&#xA;  }&#xA;  pthread_mutex_unlock(&amp;m);&#xA;  return ret;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;By the way, &lt;code&gt;libcCall&lt;/code&gt; is not defined on &lt;code&gt;GOOS=linux&lt;/code&gt;. I had to rewrite &lt;code&gt;//go:build&lt;/code&gt; in &lt;code&gt;runtime/sys_libc.go&lt;/code&gt; properly.&lt;/p&gt;&#xA;  &lt;p&gt;If you forcibly call a C function using assembly without &lt;code&gt;libcCall&lt;/code&gt;, a C stack will be on the current Goroutine&#39;s stack. Then, you might find very mysterious errors. I don&#39;t recommend invoking a C function without &lt;code&gt;libcCall&lt;/code&gt;.&lt;/p&gt;&#xA;  &lt;h3&gt;Ignoring signals&lt;/h3&gt;&#xA;  &lt;p&gt;Hitsumabushi ignores all signals. For example, &lt;a href=&#34;https://github.com/hajimehoshi/hitsumabushi/blob/033f91b0b848e44349a91ccd28d6436bc22d0c44/1.17/runtime/os_linux.go.patch#L165-L180&#34;&gt;&lt;code&gt;sigaltstack&lt;/code&gt; and &lt;code&gt;sigprocmask&lt;/code&gt; in &lt;code&gt;runtime&lt;/code&gt; are empty&lt;/a&gt;. There are standard C functions that deal with signals, but they are not implemented in some environments.&lt;/p&gt;&#xA;  &lt;p&gt;As a side effect, accessing a nil pointer caused SEGV, and &lt;code&gt;recover&lt;/code&gt;-ing it became impossible. A program dies without panic messages, even. This is inconvenient to some extent, but we have to put in the effort to avoid this issue in production environments.&lt;/p&gt;&#xA;  &lt;h3&gt;Implementing a pseudo file system&lt;/h3&gt;&#xA;  &lt;p&gt;Even when a Go program does nothing, the runtime might access the file system. On Linux, apparently these files are read from the runtime:&lt;/p&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;code&gt;/proc/self/auxv&lt;/code&gt; (Information about e.g. a page size)&lt;/li&gt;&#xA;    &lt;li&gt;&lt;code&gt;/sys/kernel/mm/transparent_hugepage/hpage_pmd_size&lt;/code&gt; (Huge Page Size)&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;p&gt;I hand-crafted some content for both. For example, I used 0 for Huge Page Size since it worked. For the implementation, see &lt;a href=&#34;https://github.com/hajimehoshi/hitsumabushi/blob/033f91b0b848e44349a91ccd28d6436bc22d0c44/1.17/runtime/cgo/gcc_linux_arm64.c.patch#L437-L454&#34;&gt;Hitsumabushi&#39;s &lt;code&gt;c_open&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;  &lt;p&gt;For writing files, I implemented only a standard output and a standard error. Both just use &lt;code&gt;fprintf&lt;/code&gt;. Without them, even &lt;code&gt;println&lt;/code&gt; doesn&#39;t work. I decided not to implement reading and writing other files for now. For the implementation, see &lt;a href=&#34;https://github.com/hajimehoshi/hitsumabushi/blob/033f91b0b848e44349a91ccd28d6436bc22d0c44/1.17/runtime/cgo/gcc_linux_arm64.c.patch#L480-L499&#34;&gt;Hitsumabushi&#39;s &lt;code&gt;c_write1&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;  &lt;h3&gt;Implementing a pseudo memory system&lt;/h3&gt;&#xA;  &lt;p&gt;In Go&#39;s heap memory management, &lt;a href=&#34;https://man7.org/linux/man-pages/man2/mmap.2.html&#34;&gt;&lt;code&gt;mmap&lt;/code&gt;&lt;/a&gt; system call is the bottom layer on Linux. Go manages virtual memory allocated there. &lt;code&gt;munmap&lt;/code&gt; is called for unused regions.&lt;/p&gt;&#xA;  &lt;p&gt;There are &lt;a href=&#34;https://cs.opensource.google/go/go/+/refs/tags/go1.17.5:src/runtime/malloc.go;l=349-360&#34;&gt;4 states&lt;/a&gt; of a heap memory region and these states transition as in the diagram below. When the state is &#39;Ready&#39;, the region is available.&lt;/p&gt;&#xA;  &lt;figure&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/native_compiling_for_nintendo_switch/memory.png&#34; width=&#34;360&#34; alt=&#34;The state transition diagram of Go&#39;s memory&#34;&gt;&lt;/p&gt;&#xA;    &lt;figcaption&gt;The state transition diagram of Go&#39;s memory&lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;  &lt;p&gt;Go specifies an address in virtual memory and uses an allocated memory region with the address. However, there is no standard C function to allocate memory with a specific address. That&#39;s unfortunate.&lt;/p&gt;&#xA;  &lt;p&gt;There are some platforms where it is impossible to allocate memory with a specific address: Plan 9 and Wasm. Hitsumabushi referred to them and implemented a &#39;corner-cutting&#39; memory system. It referred to &lt;a href=&#34;https://cs.opensource.google/go/go/+/refs/tags/go1.17.5:src/runtime/mem_js.go&#34;&gt;the Wasm version&lt;/a&gt; in particular, which is the simplest implementation. I won&#39;t describe the details here, but basically, the implementation is as shown in the following list. For an actual source, see &lt;a href=&#34;https://github.com/hajimehoshi/hitsumabushi/blob/033f91b0b848e44349a91ccd28d6436bc22d0c44/1.17/runtime/mem_linux.go&#34;&gt;Hitsumabushi&#39;s &lt;code&gt;mem_linux.go&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;code&gt;sysAlloc&lt;/code&gt;: Calls &lt;code&gt;sysReserve&lt;/code&gt; and &lt;code&gt;sysMap&lt;/code&gt;.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;code&gt;sysMap&lt;/code&gt;: Increments the total size record of heap memory.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;code&gt;sysFree&lt;/code&gt;: Decrements the total size record of heap memory.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;code&gt;sysReserve&lt;/code&gt;: Calls &lt;code&gt;calloc&lt;/code&gt;.&lt;/li&gt;&#xA;    &lt;li&gt;The other functions do nothing.&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;p&gt;As you can see, there is a call of &lt;code&gt;calloc&lt;/code&gt; but no call of &lt;code&gt;free&lt;/code&gt;. It is impossible to &lt;code&gt;free&lt;/code&gt; a part of a region allocated by &lt;code&gt;calloc&lt;/code&gt;. This means that memory usage is monotonically increased. Originally, the method to make an Ebiten application work on Nintendo Switch was to convert Go to C++ via Wasm, and memory usage was also monotonically increased there&lt;a href=&#34;#footnote_6&#34;&gt;*6&lt;/a&gt;. It didn’t end up making things worse, at the very least, so I’ve compromised with this solution so far, but I would like to fix this in the future...&lt;/p&gt;&#xA;  &lt;h3&gt;Implementing pseudo &lt;code&gt;futex&lt;/code&gt;&lt;/h3&gt;&#xA;  &lt;p&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man2/futex.2.html&#34;&gt;&lt;code&gt;futex&lt;/code&gt;&lt;/a&gt; is the bottom layer of the part that handles sleeping and waking up threads. Of course, the standard C functions and pthread functions cannot invoke &lt;code&gt;futex&lt;/code&gt; directly. So, I had to mimic the behavior of &lt;code&gt;futex&lt;/code&gt; with pthread. Originally, pthread itself is implemented with &lt;code&gt;futex&lt;/code&gt;, so I had to do the opposite thing.&lt;/p&gt;&#xA;  &lt;p&gt;There are &lt;a href=&#34;https://cs.opensource.google/go/go/+/refs/tags/go1.17.5:src/runtime/os_linux.go;l=17-24&#34;&gt;two ways&lt;/a&gt; to use &lt;code&gt;futex&lt;/code&gt; via Go.&lt;/p&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;code&gt;futexsleep(uint32 *addr, uint32 val)&lt;/code&gt;: Makes the thread sleep when &lt;code&gt;addr&lt;/code&gt; is &lt;code&gt;val&lt;/code&gt;.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;code&gt;futexwake(uint32 *addr)&lt;/code&gt;: Wakes up the thread which sleeps with &lt;code&gt;addr&lt;/code&gt;.&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;p&gt;In Hitsumabushi, I added a simple implementation like this. For an actual source, see &lt;a href=&#34;https://github.com/hajimehoshi/hitsumabushi/blob/033f91b0b848e44349a91ccd28d6436bc22d0c44/1.17/runtime/cgo/gcc_linux_arm64.c.patch#L321-L385&#34;&gt;Hitsumabushi&#39;s &lt;code&gt;pseudo_futex&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;// A pseudo code&#xA;pseudo_futex(void* uaddr, int32_t val) {&#xA;  static pthread_cond_t cond; // A condition variable&#xA;&#xA;  switch (mode) {&#xA;  case sleep:&#xA;    if (*uaddr == val) {&#xA;      cond_wait(&amp;cond); // Sleep&#xA;    }&#xA;    break;&#xA;  case wake:&#xA;    cond_broadcast(&amp;cond); // Wake up all the threads sleeping with cond.&#xA;    break;&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;When &lt;code&gt;wake&lt;/code&gt; is called, it will wake up not only the necessary threads, but all the threads. If you want to wake up only necessary threads, you would need to manage multiple condition variables for each &lt;code&gt;uaddr&lt;/code&gt;, which would be cumbersome. Such unnecessary waking up is called &lt;a href=&#34;https://en.wikipedia.org/wiki/Spurious_wakeup&#34;&gt;spurious wakeup&lt;/a&gt;. &lt;a href=&#34;https://cs.opensource.google/go/go/+/refs/tags/go1.17.5:src/runtime/os_linux.go;l=41-42&#34;&gt;This is explicitly expected in Go source code&lt;/a&gt;, so this is not problematic. However, performance might be degraded.&lt;/p&gt;&#xA;  &lt;h3&gt;Adjusting the number of CPU cores&lt;/h3&gt;&#xA;  &lt;p&gt;The number of CPU cores is determined by the result of the &lt;a href=&#34;https://man7.org/linux/man-pages/man2/sched_setaffinity.2.html&#34;&gt;&lt;code&gt;sched_getaffinity&lt;/code&gt;&lt;/a&gt; system call. There is no corresponding standard C function, so I gave Hitsumabushi an option to specify the number of cores to &lt;code&gt;GenOverlayJSON&lt;/code&gt;. For the actual source, see &lt;a href=&#34;https://github.com/hajimehoshi/hitsumabushi/blob/033f91b0b848e44349a91ccd28d6436bc22d0c44/overlay.go#L177-L208&#34;&gt;Hitsumabushi&#39;s &lt;code&gt;c_sched_getaffinity&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;  &lt;p&gt;There were some environments where an application froze with 2 or more CPU cores specified. It&#39;s because a thread could use only one core by default. Thus, I had to call &lt;a href=&#34;https://man7.org/linux/man-pages/man3/pthread_setaffinity_np.3.html&#34;&gt;&lt;code&gt;pthread_setaffinity_np&lt;/code&gt;&lt;/a&gt; explicitly. In Hitsumabushi, I added a hack to call &lt;code&gt;pthread_setaffinity_np&lt;/code&gt; just after &lt;a href=&#34;https://man7.org/linux/man-pages/man3/pthread_create.3.html&#34;&gt;&lt;code&gt;pthread_create&lt;/code&gt;&lt;/a&gt;. For the actual source, see &lt;a href=&#34;https://github.com/hajimehoshi/hitsumabushi/blob/033f91b0b848e44349a91ccd28d6436bc22d0c44/overlay.go#L217-L247&#34;&gt;Hitsumabushi&#39;s &lt;code&gt;overlay.go&lt;/code&gt;&lt;/a&gt;. As an aside, it was quite hard to find this solution. I can’t tell you how happy I was to finally solve this conundrum.&lt;/p&gt;&#xA;  &lt;h3&gt;Entry point&lt;/h3&gt;&#xA;  &lt;p&gt;Hitsumabushi is assumed to be used with &lt;code&gt;-buildmode=c-archive&lt;/code&gt;. The generated file is a C library, and even &lt;code&gt;main&lt;/code&gt; is not called. If you want to call &lt;code&gt;main&lt;/code&gt;, you have to define a C function and call &lt;code&gt;main&lt;/code&gt; explicitly inside. Calling &lt;code&gt;main&lt;/code&gt; explicitly does not make sense usually, but I think it is practical for &lt;code&gt;c-archive&lt;/code&gt;.&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import &#34;C&#34;&#xA;&#xA;//export GoMain&#xA;func GoMain() {&#xA;    main()&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;pre&gt;&lt;code&gt;// Call the entry point in Go in the entry point in C.&#xA;int main() {&#xA;  GoMain();&#xA;  return 0;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;h2&gt;Results&lt;/h2&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;strong&gt;I managed to get a game called &#34;&lt;a href=&#34;https://github.com/hajimehoshi/go-inovation&#34;&gt;Innovation 2007&lt;/a&gt;&#34; working on an actual Nintendo Switch device&lt;/strong&gt;. Controller support, touch inputting, and audio all work perfectly. Innovation 2007 uses most of Ebiten&#39;s features, so I&#39;m sure other games would work as well.&lt;/li&gt;&#xA;    &lt;li&gt;Compiling speed became much faster. Before this solution, it took 5 to 10 minutes to full-build a C++ project, but now it only takes less than 10 seconds. This is awesome!&lt;/li&gt;&#xA;    &lt;li&gt;Suspensions by GC seem to have disappeared.&lt;/li&gt;&#xA;    &lt;li&gt;I now have to update whenever a new version of Go is released. This is an acceptable compromise to me. From my past experiments, I don’t expect any major changes anyway.&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;h2&gt;Remarks&lt;/h2&gt;&#xA;  &lt;p&gt;This is a side note, but the implementation of Go&#39;s runtime has ample accumulation of knowledge about modern OSes and is very insightful. I think it can teach you a significant amount about computer science. That said, it can be quite daunting to read it without a purpose, so I recommend doing so with some sort of modification project in mind.&lt;/p&gt;&#xA;  &lt;p&gt;Thanks to the near-success of this project, the method I presented in the Go Conference is now becoming outdated. This was inevitable, obviously, but it still makes me feel a little sad to see that hard work go obsolete.&lt;/p&gt;&#xA;  &lt;h2&gt;Future works&lt;/h2&gt;&#xA;  &lt;p&gt;I&#39;ll continue polishing this so that a proper game can be released for Nintendo Switch. As I described first, there is a high level of uncertainty in this project. Until a game is released, I cannot anticipate what kind of issues will occur, and I always have to be on high alert. Even in the worst case scenario, however, I know we can continue to release the game with the help of &lt;a href=&#34;https://github.com/hajimehoshi/go2cpp&#34;&gt;go2cpp&lt;/a&gt;, which is reassuring. Still, with all the hard work I’ve put into this already, I really want to release a game with Hitsumabushi and see it achieve some actual results.&lt;/p&gt;&#xA;  &lt;h2&gt;Acknowledgments&lt;/h2&gt;&#xA;  &lt;p&gt;Thanks to the kind folks over in the PySpa community for all their technical advice. I’d also like to express my gratitude to Daigo, &lt;a href=&#34;https://odencat.com/&#34;&gt;President of Odencat Inc.&lt;/a&gt;, who kindly uses Ebiten for Nintendo Switch. Thank you very much.&lt;/p&gt;&#xA;  &lt;p&gt;Happy new year!&lt;/p&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;span id=&#34;footnote_1&#34;&gt;*1&lt;/span&gt; It&#39;s due to complicated business reasons.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;span id=&#34;footnote_2&#34;&gt;*2&lt;/span&gt; Hitsumabushi is &lt;a href=&#34;https://en.wikipedia.org/wiki/Unadon#Variations&#34;&gt;Japanese food&lt;/a&gt;.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;span id=&#34;footnote_3&#34;&gt;*3&lt;/span&gt; Katsuobushi is &lt;a href=&#34;https://en.wikipedia.org/wiki/Katsuobushi&#34;&gt;yet another Japanese food&lt;/a&gt;.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;span id=&#34;footnote_4&#34;&gt;*4&lt;/span&gt; There is another solution, making a pseudo &lt;code&gt;/dev/urandom&lt;/code&gt; file, but I didn&#39;t adopt this. There is no other good way than using a platform-specific API.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;span id=&#34;footnote_5&#34;&gt;*5&lt;/span&gt; The main reason is portability, but there is also another compelling reason: I wouldn&#39;t be able to make it open-source if it used a platform-specific API.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;span id=&#34;footnote_6&#34;&gt;*6&lt;/span&gt; To be exact, about 2G of memory was allocated first and was used without additional allocations.&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;</content>
  </entry>
  <entry>
    <title>Ebiten in 2021</title>
    <id>https://ebiten.org/blog/2021.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/2021.html"></link>
    <published>2021-12-06T00:00:00+09:00</published>
    <updated>2021-12-06T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;style&gt;&#xA;  .avatar img {&#xA;      border-radius: 50%;&#xA;  }&#xA;&lt;/style&gt;&#xA;&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h1&gt;Ebiten in 2021&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2021-12-06&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;p&gt;It&#39;s been 8 years since I started to develop Ebiten. This article is a retrospective of Ebiten in 2021.&lt;/p&gt;&#xA;  &lt;h2&gt;Sponsors&lt;/h2&gt;&#xA;  &lt;p&gt;These people &lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;sponsored&lt;/a&gt; me in between December 2020 and November 2021. I can&#39;t thank you enough!&lt;/p&gt;&#xA;  &lt;p&gt;(In the order of total sponsoring amounts)&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h1&gt;2021 年の Ebiten&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2021-12-06&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;p&gt;自分が Ebiten を開発し始めてから 8 年になりました。この記事は、 2021 年の Ebiten の回顧録です。&lt;/p&gt;&#xA;  &lt;h2&gt;スポンサー&lt;/h2&gt;&#xA;  &lt;p&gt;2020 年 12 月から 2021 年 11 月の間、以下の方々に&lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;スポンサー&lt;/a&gt;していただきました。心より感謝いたします。&lt;/p&gt;&#xA;  &lt;p&gt;(スポンサー総額の大きい順、敬称略)&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/Inkeliz&#34;&gt;&lt;img src=&#34;https://github.com/Inkeliz.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/Inkeliz&#34;&gt;Inkeliz&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/silbinarywolf&#34;&gt;&lt;img src=&#34;https://github.com/silbinarywolf.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/silbinarywolf&#34;&gt;Jae Bentvelzen&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/pokemium&#34;&gt;&lt;img src=&#34;https://github.com/pokemium.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/pokemium&#34;&gt;Akatsuki&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/nadimkobeissi&#34;&gt;&lt;img src=&#34;https://github.com/nadimkobeissi.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/nadimkobeissi&#34;&gt;Nadim Kobeissi&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/sedyh&#34;&gt;&lt;img src=&#34;https://github.com/sedyh.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/sedyh&#34;&gt;Artem Sedykh&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/rootVIII&#34;&gt;&lt;img src=&#34;https://github.com/rootVIII.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/rootVIII&#34;&gt;James&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/cdemers&#34;&gt;&lt;img src=&#34;https://github.com/cdemers.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/cdemers&#34;&gt;Charle Demers&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/lamados&#34;&gt;&lt;img src=&#34;https://github.com/lamados.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/lamados&#34;&gt;Ella Kleine&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/zJeremiah&#34;&gt;&lt;img src=&#34;https://github.com/zJeremiah.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/zJeremiah&#34;&gt;Jeremiah&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/mortenson&#34;&gt;&lt;img src=&#34;https://github.com/mortenson.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/mortenson&#34;&gt;Samuel Mortenson&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/zacharyburkett&#34;&gt;&lt;img src=&#34;https://github.com/zacharyburkett.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/zacharyburkett&#34;&gt;Zachary Burkett&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/raa0121&#34;&gt;&lt;img src=&#34;https://github.com/raa0121.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/raa0121&#34;&gt;raa0121&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/michaelmcallister&#34;&gt;&lt;img src=&#34;https://github.com/michaelmcallister.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/michaelmcallister&#34;&gt;Michael McAllister&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/Jack-Ji&#34;&gt;&lt;img src=&#34;https://github.com/Jack-Ji.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/Jack-Ji&#34;&gt;jack&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/windo&#34;&gt;&lt;img src=&#34;https://github.com/windo.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/windo&#34;&gt;Siim Põder&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/MrParano1d&#34;&gt;&lt;img src=&#34;https://github.com/MrParano1d.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/MrParano1d&#34;&gt;MrParano1d&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/hunterkepley&#34;&gt;&lt;img src=&#34;https://github.com/hunterkepley.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/hunterkepley&#34;&gt;Hunter&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/Kirbstomper&#34;&gt;&lt;img src=&#34;https://github.com/Kirbstomper.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/Kirbstomper&#34;&gt;Christopher Smith&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/TheMightyGit&#34;&gt;&lt;img src=&#34;https://github.com/TheMightyGit.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/TheMightyGit&#34;&gt;Johnny&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/rubiojr&#34;&gt;&lt;img src=&#34;https://github.com/rubiojr.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/rubiojr&#34;&gt;Sergio Rubio&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/SolarLune&#34;&gt;&lt;img src=&#34;https://github.com/SolarLune.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/SolarLune&#34;&gt;SolarLune&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/conifer-dev&#34;&gt;&lt;img src=&#34;https://github.com/conifer-dev.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/conifer-dev&#34;&gt;Conifer&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/griffithsh&#34;&gt;&lt;img src=&#34;https://github.com/griffithsh.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/griffithsh&#34;&gt;Huw Griffiths&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/tomlister&#34;&gt;&lt;img src=&#34;https://github.com/tomlister.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/tomlister&#34;&gt;Tom Lister&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/franzen&#34;&gt;Nils Franzen&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/nihei9&#34;&gt;Ryo Nihei&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel&#34;&gt;Spiegel&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/bokuweb&#34;&gt;bokuweb&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/kengonakajima&#34;&gt;Kengo Nakajima&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/dictav&#34;&gt;Shintaro Abe&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/brudnak&#34;&gt;Andrew Brudnak at Rancher&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/Erexo&#34;&gt;Kacper Drobny&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/kent-hamaguchi&#34;&gt;Kent&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/MrWormHole&#34;&gt;Talha Altınel&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/stt106&#34;&gt;Tiantang Sun&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/neguse&#34;&gt;neguse&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/liamg&#34;&gt;Liam Galvin&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/sinisterstuf&#34;&gt;Siôn le Roux&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/yohamta&#34;&gt;yohamta&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/jithinraj&#34;&gt;Jithin Raj&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/zucenko&#34;&gt;zucenko&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/yutkat&#34;&gt;Yuta Katayama&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/head77x&#34;&gt;Brandon Chung&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/dmitryburov&#34;&gt;Dmitry Burov&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/nikolaydubina&#34;&gt;Nikolay Dubina&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;span lang=&#34;en&#34;&gt;And some private sponsors&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;その他、何名かのプライベートスポンサー&lt;/span&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h2&gt;Contributors&lt;/h2&gt;&#xA;  &lt;p&gt;These people contributed to Ebiten in between December 2020 and November 2021. I appreciate all the contributions!&lt;/p&gt;&#xA;  &lt;p&gt;(In the order of total commits)&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h2&gt;コントリビューター&lt;/h2&gt;&#xA;  &lt;p&gt;2020 年 12 月から 2021 年 11 月の間、以下の方々にコントリビュートしていただきました。心より感謝いたします。&lt;/p&gt;&#xA;  &lt;p&gt;(コミット数順、敬称略)&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/divVerent&#34;&gt;&lt;img src=&#34;https://github.com/divVerent.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/divVerent&#34;&gt;divVerent&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/tslocum&#34;&gt;&lt;img src=&#34;https://github.com/tslocum.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/tslocum&#34;&gt;Trevor Slocum&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/tomlister&#34;&gt;&lt;img src=&#34;https://github.com/tomlister.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/tomlister&#34;&gt;Tom Lister&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/kisunji&#34;&gt;&lt;img src=&#34;https://github.com/kisunji.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/kisunji&#34;&gt;Chris S. Kim&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/corfe83&#34;&gt;&lt;img src=&#34;https://github.com/corfe83.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/corfe83&#34;&gt;corfe83&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/Enrico204&#34;&gt;&lt;img src=&#34;https://github.com/Enrico204.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/Enrico204&#34;&gt;Enrico&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/kumagi&#34;&gt;&lt;img src=&#34;https://github.com/kumagi.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/kumagi&#34;&gt;Hiroki KUMAZAKI&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;    &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/Humpheh&#34;&gt;&lt;img src=&#34;https://github.com/Humpheh.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/Humpheh&#34;&gt;Humphrey Shotton&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;    &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/TheMightyGit&#34;&gt;&lt;img src=&#34;https://github.com/TheMightyGit.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/TheMightyGit&#34;&gt;Johnny&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/bubo-py&#34;&gt;&lt;img src=&#34;https://github.com/bubo-py.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/bubo-py&#34;&gt;Kamil&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/nanoslayer&#34;&gt;&lt;img src=&#34;https://github.com/nanoslayer.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/nanoslayer&#34;&gt;nanoslayer&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/r3vit&#34;&gt;&lt;img src=&#34;https://github.com/r3vit.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/r3vit&#34;&gt;r3vit&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/wasedaigo&#34;&gt;&lt;img src=&#34;https://github.com/wasedaigo.png?size=168&#34; width=&#34;168&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/wasedaigo&#34;&gt;wasedaigo&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h2&gt;Events&lt;/h2&gt;&#xA;  &lt;h3&gt;May&lt;/h3&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.1.html&#34;&gt;Ebiten 2.1&lt;/a&gt; was released. The new features are specifying cursor styles and so on.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;https://discord.gg/3tVdM5H8cC&#34;&gt;Ebiten Discord Server&lt;/a&gt; started.&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;h3&gt;June&lt;/h3&gt;&#xA;  &lt;div class=&#34;grid-container&#34;&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;ul&gt;&#xA;        &lt;li&gt;Odencat Inc. released &lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/en.html&#34;&gt;Bear&#39;s Restaurant Nintendo Switch version&lt;/a&gt;. This is the first game in Go for consoles ever.&lt;/li&gt;&#xA;      &lt;/ul&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;figure&gt;&#xA;        &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/en.html&#34;&gt;&lt;img src=&#34;/images/blog/2021/bears_restaurant_en.jpg&#34; width=&#34;1000&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;        &lt;figcaption&gt;&lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/en.html&#34;&gt;Bear&#39;s Restaurant, Odencat Inc., 2021&lt;/a&gt;&lt;/figcaption&gt;&#xA;      &lt;/figure&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;h3&gt;July&lt;/h3&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/sedyh/awesome-ebiten&#34;&gt;Awesome Ebiten&lt;/a&gt; by Artem Sedykh was opened. Awesome Ebiten is a culated list for Ebiten works.&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;h3&gt;August&lt;/h3&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/hajimehoshi/oto/releases/tag/v2.0.0&#34;&gt;Oto ver. 2&lt;/a&gt; was released&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;h3&gt;September&lt;/h3&gt;&#xA;  &lt;div class=&#34;grid-container&#34;&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;ul&gt;&#xA;        &lt;li&gt;Odencat&#39;s &#34;&lt;a href=&#34;https://odencat.com/en/game/mousebusters/&#34;&gt;Mousebusters&lt;/a&gt;&#34; received &lt;a href=&#34;https://events.withgoogle.com/indie-games-festival-2021-japan/2021--/#content&#34;&gt;Top 3&lt;/a&gt; award at &lt;a href=&#34;https://events.withgoogle.com/indie-games-festival-2021-japan/&#34;&gt;Google Play Indie Game Festival 2021&lt;/a&gt;. Congratulations! Odencat&#39;s games made with Ebiten have received some awards in this event for three years in a row.&lt;/li&gt;&#xA;      &lt;/ul&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Ooh! We won Top3 of the Google Indie Game Festival !! Another big achievement of Odencat! :3 &lt;a href=&#34;https://t.co/cDRs2NTLVK&#34;&gt;pic.twitter.com/cDRs2NTLVK&lt;/a&gt;&lt;/p&gt;&amp;mdash; Odencat (@OdencatGames) &lt;a href=&#34;https://twitter.com/OdencatGames/status/1434102492946571267?ref_src=twsrc%5Etfw&#34;&gt;September 4, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;h3&gt;October&lt;/h3&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;Odencat released &#34;&lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/en.html&#34;&gt;Bear&#39;s Restaurant Steam version&lt;/a&gt;.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.2.html&#34;&gt;Ebiten 2.2&lt;/a&gt; was released. The new features are supporting Nintendo Switch, standard gamepad layouts, and so on.&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;h3&gt;November&lt;/h3&gt;&#xA;  &lt;div class=&#34;grid-container&#34;&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;ul&gt;&#xA;        &lt;li&gt;I gave a presentation &#34;&lt;a href=&#34;https://gocon.jp/2021autumn/sessions/go-nintendo-switch/&#34;&gt;Developing games in Go for Nintendo Switch™&lt;/a&gt;&#34; at an online conference in Japan &#34;&lt;a href=&#34;https://gocon.jp/2021autumn/en/&#34;&gt;Go Conference 2021 Autumn&lt;/a&gt;&#34;.&lt;/li&gt;&#xA;        &lt;li&gt;I contributed a Japanese article &#34;How game engines treat GPU ― learning from the implementation of Ebiten&#34; to &#34;&lt;a href=&#34;https://www.lambdanote.com/collections/n/products/nmonthly-vol-3-no-2-2021&#34;&gt;N-Gekkan Lambda Note Vol.3, No.2 (2021)&lt;/a&gt;&#34; by Lambda Note Ltd.&lt;/li&gt;&#xA;      &lt;/ul&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vTMRSmuWjhpOx3DIgetfi72jcOGvlqPU5z0Nps24YN6dxaBbu4dWm0FXS2f--D4G2b1aAvTmfqNA2IG/embed?start=false&amp;loop=false&amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;354&#34; height=&#34;228&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h2&gt;出来事&lt;/h2&gt;&#xA;  &lt;h3&gt;5 月&lt;/h3&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.1.html&#34;&gt;Ebiten 2.1&lt;/a&gt; がリリースされました。新機能はカーソルのスタイル指定などです。&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;https://discord.gg/3tVdM5H8cC&#34;&gt;Ebiten Discord Server&lt;/a&gt; がはじまりました。&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;h3&gt;6 月&lt;/h3&gt;&#xA;  &lt;div class=&#34;grid-container&#34;&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;ul&gt;&#xA;        &lt;li&gt;Odencat 株式会社から、「&lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/ja.html&#34;&gt;くまのレストラン Nintendo Switch 版&lt;/a&gt;」がリリースされました。 Go 製初の家庭用ゲーム機ゲームです。&lt;/li&gt;&#xA;      &lt;/ul&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;figure&gt;&#xA;        &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/ja.html&#34;&gt;&lt;img src=&#34;/images/blog/2021/bears_restaurant_ja.jpg&#34; width=&#34;1000&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;        &lt;figcaption&gt;&lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/ja.html&#34;&gt;くまのレストラン, Odencat 株式会社, 2021&lt;/a&gt;&lt;/figcaption&gt;&#xA;      &lt;/figure&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;h3&gt;7 月&lt;/h3&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;Artem Sedykh 氏の &lt;a href=&#34;https://github.com/sedyh/awesome-ebiten&#34;&gt;Awesome Ebiten&lt;/a&gt; がオープンになりました。 Awesome Ebiten は Ebiten を使った作品のキュレーションリストです。&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;h3&gt;8 月&lt;/h3&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/hajimehoshi/oto/releases/tag/v2.0.0&#34;&gt;Oto ver. 2&lt;/a&gt; をリリースしました。&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;h3&gt;9 月&lt;/h3&gt;&#xA;  &lt;div class=&#34;grid-container&#34;&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;ul&gt;&#xA;        &lt;li&gt;Odencat 株式会社の「&lt;a href=&#34;https://odencat.com/ja/game/mousebusters/&#34;&gt;ねずみバスターズ&lt;/a&gt;」が、 &lt;a href=&#34;https://events.withgoogle.com/indie-games-festival-2021-japan/&#34;&gt;Google Play Indie Game Festival 2021&lt;/a&gt; にて &lt;a href=&#34;https://events.withgoogle.com/indie-games-festival-2021-japan/2021--/#content&#34;&gt;TOP3&lt;/a&gt; を獲得しました。おめでとうございます! Odencat 社による Ebiten 製のゲームは、このイベントで 3 年連続なにかの賞を受賞しています。&lt;/li&gt;&#xA;      &lt;/ul&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Ooh! We won Top3 of the Google Indie Game Festival !! Another big achievement of Odencat! :3 &lt;a href=&#34;https://t.co/cDRs2NTLVK&#34;&gt;pic.twitter.com/cDRs2NTLVK&lt;/a&gt;&lt;/p&gt;&amp;mdash; Odencat (@OdencatGames) &lt;a href=&#34;https://twitter.com/OdencatGames/status/1434102492946571267?ref_src=twsrc%5Etfw&#34;&gt;September 4, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;h3&gt;10 月&lt;/h3&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;Odencat 株式会社から、「&lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/ja.html&#34;&gt;くまのレストラン Steam 版&lt;/a&gt;」がリリースされました。&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.2.html&#34;&gt;Ebiten 2.2&lt;/a&gt; がリリースされました。新機能は Nintendo Switch™ の対応、標準ゲームパッド機能などです。&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;h3&gt;11 月&lt;/h3&gt;&#xA;  &lt;div class=&#34;grid-container&#34;&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;ul&gt;&#xA;        &lt;li&gt;日本のオンラインカンファレンス「&lt;a href=&#34;https://gocon.jp/2021autumn/ja/&#34;&gt;Go Conference 2021 Autumn&lt;/a&gt;」にて、「&lt;a href=&#34;https://gocon.jp/2021autumn/sessions/go-nintendo-switch/&#34;&gt;Developing games in Go for Nintendo Switch™&lt;/a&gt;」という発表を行いました。&lt;/li&gt;&#xA;        &lt;li&gt;ラムダノート株式会社の「&lt;a href=&#34;https://www.lambdanote.com/collections/n/products/nmonthly-vol-3-no-2-2021&#34;&gt;n 月刊ラムダノート Vol.3, No.2 (2021)&lt;/a&gt;」に「ゲームエンジンでGPUをどう扱うか ― Ebitenの設計から学ぶ」を寄稿しました。&lt;/li&gt;&#xA;      &lt;/ul&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vQ7NcPdBmoVu83KqhPNNZ3X5BqDdemxgDS8lwpuqYOZNOozodmzL76GnEh8prXp96EKkBpWS5DfJOMa/embed?start=false&amp;loop=false&amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;354&#34; height=&#34;228&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h2&gt;Works made with Ebiten&lt;/h2&gt;&#xA;  &lt;p&gt;I picked some representative ones from games and applications made with Ebiten and relased this year. I&#39;m afraid not all works this year could be listed since so many works were released. I appreciate all the works!&lt;/p&gt;&#xA;  &lt;p&gt;The copyright of these screenshots and the other images belong to their authors.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h2&gt;Ebiten 製の作品&lt;/h2&gt;&#xA;  &lt;p&gt;今年公開された Ebiten 製のゲームやアプリケーションのうち、代表的なものをピックアップしました。恐縮ながら、たくさん作品があったため、今年の作品をすべて載せることはできませんでした。すべての作品に感謝します!&lt;/p&gt;&#xA;  &lt;p&gt;スクリーンショットなどの画像の著作権は、すべてアプリケーションの作者に帰属します。&lt;/p&gt;&#xA;  &lt;p&gt;(作者名は敬称略)&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;Games&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;ゲーム&lt;/h3&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;BTOD&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Zyko&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://zyk0.itch.io/gameoff2021&#34;&gt;BTOD&lt;/a&gt; is &lt;q&gt;a runner game made in Go with Ebiten engine&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://zyk0.itch.io/gameoff2021&#34;&gt;&lt;img src=&#34;/images/blog/2021/btod.png&#34; width=&#34;315&#34; height=&#34;250&#34; alt=&#34;BTOD&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;Carotid Artillery&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Trevor Slocum&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://rocketnine.itch.io/carotid-artillery&#34;&gt;Carotid Artillery&lt;/a&gt; is a &lt;q&gt;twin-stick shooter set in a dungeon crawling with vampires&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://rocketnine.itch.io/carotid-artillery&#34;&gt;&lt;img src=&#34;/images/blog/2021/carotid_artillery.png&#34; width=&#34;315&#34; height=&#34;250&#34; alt=&#34;Carotid Artillery&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;Cr1ck◼️t&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Siôn le Roux&lt;/p&gt;&#xA;    &lt;p&gt;&lt;q&gt;Find food. Stay dry. Conserve your energy. Some bugs are intentional...&lt;/q&gt;&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://sinisterstuf.itch.io/cr1ckt&#34;&gt;&lt;img src=&#34;/images/blog/2021/cr1ck_t.png&#34; width=&#34;315&#34; height=&#34;250&#34; alt=&#34;Cr1ck◼️t&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;Driving in the Clouds&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Ichiban Kunio&lt;/p&gt;&#xA;    &lt;p&gt;&lt;q&gt;You only have to tap left or right half of the screen to turn left or right. That&#39;s it!&lt;/q&gt;&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.ku20298.drivingintheclouds&#34;&gt;&lt;img src=&#34;/images/blog/2021/driving_in_the_cloud.webp&#34; width=&#34;360&#34; height=&#34;360&#34; alt=&#34;Driving in the Clouds&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;Elevator Ninja&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Loig&lt;/p&gt;&#xA;    &lt;p&gt;&lt;q&gt;Use your moving skills to survive the fall of an elevator.&lt;/q&gt;&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://loig.itch.io/elevator-ninja&#34;&gt;&lt;img src=&#34;/images/blog/2021/elevator_ninja.png&#34; width=&#34;707&#34; height=&#34;702&#34; alt=&#34;Elevator Ninja&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;Feta Feles Rebirth&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: The Tophat Demon&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://x54321.itch.io/feta-feles-rebirth&#34;&gt;Feta Feles Rebirth&lt;/a&gt; is &lt;q&gt;an eerie bullet hell shooter, featuring a small story based around your &#34;pet cat.&#34;&lt;/q&gt;&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://x54321.itch.io/feta-feles-rebirth&#34;&gt;&lt;img src=&#34;/images/blog/2021/feta_fales_rebirth.png&#34; width=&#34;1357&#34; height=&#34;1013&#34; alt=&#34;Feta Feles Rebirth&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;Godanmaku&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Yota&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://github.com/yohamta/godanmaku&#34;&gt;Godanmaku&lt;/a&gt; is a &lt;q&gt;simple shooting game using ebiten and Golang&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://github.com/yohamta/godanmaku&#34;&gt;&lt;img src=&#34;/images/blog/2021/godanmaku.png&#34; width=&#34;480&#34; height=&#34;480&#34; alt=&#34;Godanmaku&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;Gosol&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Oddsteam&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://github.com/oddstream/gosol&#34;&gt;Gosol&lt;/a&gt; &lt;q&gt;towards a polymorphic solitaire engine in Go+Ebiten, with help from fogleman/gg.&lt;/q&gt;&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://github.com/oddstream/gosol&#34;&gt;&lt;img src=&#34;/images/blog/2021/gosol.png&#34; width=&#34;635&#34; height=&#34;470&#34; alt=&#34;Gosol&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;Skulls&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: James&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://github.com/rootVIII/skulls&#34;&gt;Skulls&lt;/a&gt; is &lt;q&gt;a simple Columns-like strategy game developed in Golang with the Ebiten library (for Android)&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://github.com/rootVIII/skulls&#34;&gt;&lt;img src=&#34;/images/blog/2021/skulls.webp&#34; width=&#34;360&#34; height=&#34;360&#34; alt=&#34;Skulls&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;Tayl&#39;s Tales&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: atolVerderben&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://atolverderben.itch.io/tayls-tales&#34;&gt;Tayl&#39;s Tales&lt;/a&gt; is &lt;q&gt;a very early beginning to some Taylspin inspired video game shenanigans&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://atolverderben.itch.io/tayls-tales&#34;&gt;&lt;img src=&#34;/images/blog/2021/tayls_tales.png&#34; width=&#34;630&#34; height=&#34;371&#34; alt=&#34;Tayl&#39;s Tales&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h3&gt;Applications&lt;/h3&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h3&gt;アプリケーション&lt;/h3&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;Darktile&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Liam Galvin&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://github.com/liamg/darktile&#34;&gt;Darktile&lt;/a&gt; is &lt;q&gt;a GPU rendered terminal emulator designed for tiling window managers&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://github.com/liamg/darktile&#34;&gt;&lt;img src=&#34;/images/blog/2021/darktile.gif&#34; width=&#34;795&#34; height=&#34;478&#34; alt=&#34;Darktile&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;screenpos&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: barjo&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://github.com/barjoio/screenpos&#34;&gt;screenpos&lt;/a&gt; is &lt;q&gt;a simple way to get a position on your screen using your keyboard and the visual aid of a grid&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://github.com/barjoio/screenpos&#34;&gt;&lt;img src=&#34;/images/blog/2021/screenpos.gif&#34; width=&#34;1920&#34; height=&#34;1080&#34; alt=&#34;screenpos&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h3&gt;Emulators&lt;/h3&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h3&gt;エミュレータ&lt;/h3&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;AXWGameboy&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Jan Niklas Richter&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://github.com/ArcticXWolf/AXWGameboy&#34;&gt;AXWGameboy&lt;/a&gt; is &lt;q&gt;a work-in-progress gameboy emulator written in golang&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/ArcticXWolf/AXWGameboy&#34;&gt;&lt;img src=&#34;https://github.com/ArcticXWolf.png?size=168&#34; width=&#34;168&#34; height=&#34;168&#34; alt=&#34;ArcticXWolf&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;Magia&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Akatsuki&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://github.com/pokemium/magia&#34;&gt;Magia&lt;/a&gt; is a &lt;q&gt;GBA emulator written in golang&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/pokemium/magia&#34;&gt;&lt;img src=&#34;https://github.com/pokemium.png?size=168&#34; width=&#34;168&#34; height=&#34;168&#34; alt=&#34;pokemium&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h3&gt;Libraries&lt;/h3&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h3&gt;ライブラリ&lt;/h3&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;EbitenUI&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Maik Schreiber&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://ebitenui.github.io/&#34;&gt;EbitenUI&lt;/a&gt; is &lt;q&gt;a user interface engine and widget library for Ebiten&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://ebitenui.github.io/&#34;&gt;&lt;img src=&#34;/images/blog/2021/ebitenui.gif&#34; width=&#34;500&#34; height=&#34;361&#34; alt=&#34;EbitenUI&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;ray_engine&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Myu-Unix&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://github.com/Myu-Unix/ray_engine&#34;&gt;ray_engine&lt;/a&gt; is &lt;q&gt;a toy raycasting engine built with Go + Ebiten v2 2D library&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://github.com/Myu-Unix/ray_engine&#34;&gt;&lt;img src=&#34;/images/blog/2021/ray_engine.gif&#34; width=&#34;640&#34; height=&#34;357&#34; alt=&#34;ray_engine&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;spx&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Qiniu (七牛云)&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://github.com/goplus/spx&#34;&gt;spx&lt;/a&gt; is &lt;q&gt;a Go+ 2D Game Engine for STEM education&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://github.com/goplus/spx&#34;&gt;&lt;img src=&#34;/images/blog/2021/spx.jpg&#34; width=&#34;340&#34; height=&#34;273&#34; alt=&#34;spx&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;h4&gt;Tetra3D&lt;/h4&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: SolarLune&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://github.com/SolarLune/Tetra3d&#34;&gt;Tetra3D&lt;/a&gt; is &lt;q&gt;a 3D software renderer written in Go by means of Ebiten, primarily for video games&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://github.com/SolarLune/Tetra3d&#34;&gt;&lt;img src=&#34;/images/blog/2021/tetra3d.gif&#34; width=&#34;500&#34; height=&#34;282&#34; alt=&#34;Tetra3D&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h3&gt;Other projects&lt;/h3&gt;&#xA;  &lt;h4&gt;Dr. Kobushi&#39;s Labyrinthine Laboratory&lt;/h4&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h3&gt;その他のプロジェクト&lt;/h3&gt;&#xA;  &lt;h4&gt;Dr. Kobushi&#39;s Labyrinthine Laboratory&lt;/h4&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p&gt;&lt;span lang=&#34;en&#34;&gt;Author&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;作者&lt;/span&gt;: Nadim Kobeissi&lt;/p&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;This is &lt;a href=&#34;https://www.kickstarter.com/projects/nadimkobeissi/dr-kobushis-labyrinthine-laboratory&#34;&gt;a Kickstarter project&lt;/a&gt;.&lt;/p&gt;&#xA;    &lt;p&gt;&lt;a href=&#34;https://drkobushi.com/&#34;&gt;Dr. Kobushi&#39;s Labyrinthine Laboratory&lt;/a&gt; &lt;q&gt;is a new puzzle adventure game about learning from your mistakes&lt;/q&gt;.&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;これは &lt;a href=&#34;https://www.kickstarter.com/projects/nadimkobeissi/dr-kobushis-labyrinthine-laboratory&#34;&gt;Kickstarter プロジェクト&lt;/a&gt;です。&lt;/p&gt;&#xA;    &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://drkobushi.com/&#34;&gt;&lt;img src=&#34;/images/blog/2021/dr_kobushi.png&#34; width=&#34;680&#34; height=&#34;272&#34; alt=&#34;Dr. Kobushi&#39;s Labyrinthine Laboratory&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;💥📣 BIG ANNOUNCEMENT: I&amp;#39;M MAKING AN INDIE PUZZLE GAME! 🎮🧩&lt;br&gt;I&amp;#39;m incredibly excited to announce DR. KOBUSHI&amp;#39;S LABYRINTHINE LABORATORY, my secret project for the past many many months!&lt;br&gt;&lt;br&gt;CHECK US OUT AND PRE-ORDER ON KICKSTARTER: &lt;a href=&#34;https://t.co/BlHb5yVG7q&#34;&gt;https://t.co/BlHb5yVG7q&lt;/a&gt;&lt;br&gt;&lt;br&gt;RTs greatly appreciated!!&lt;/p&gt;&amp;mdash; Nadim Kobeissi (@kaepora) &lt;a href=&#34;https://twitter.com/kaepora/status/1466058953771692033?ref_src=twsrc%5Etfw&#34;&gt;December 1, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h2&gt;Videos&lt;/h2&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h2&gt;ビデオ&lt;/h2&gt;&#xA;&lt;/div&gt;&#xA;&lt;h3&gt;Golang Gamedev Stream (by Solar Lune)&lt;/h3&gt;&#xA;&lt;iframe width=&#34;726&#34; height=&#34;408&#34; src=&#34;https://www.youtube.com/embed/w1dg9wwDbKI&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&#xA;&lt;h3&gt;GopherCon UK 2021: Daniela Petruzalek - Building an Indie Game in GO&lt;/h3&gt;&#xA;&lt;iframe width=&#34;726&#34; height=&#34;408&#34; src=&#34;https://www.youtube.com/embed/Oce77qCXu7I&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; auto726; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h2&gt;Tutorials&lt;/h2&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h2&gt;チュートリアル&lt;/h2&gt;&#xA;&lt;/div&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;https://www.fatoldyeti.com/categories/roguelike-tutorial/&#34;&gt;Roguelike Tutorial&lt;/a&gt; by Richard Ashkettle&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;https://www.joshdeprez.com/77&#34;&gt;Making a Game in Go&lt;/a&gt; by Josh Deprez&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h2&gt;Ebiten in 2022 and after&lt;/h2&gt;&#xA;  &lt;p&gt;There are many things I want to do for Ebiten, but I have not decided priorities. Roughly, these are the items I want to do:&lt;/p&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;b&gt;Inputting with IME&lt;/b&gt;: This should be useful to make a GUI application.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;b&gt;Handling input events&lt;/b&gt;: Now, Ebiten ignores inputs that happen in smaller time interval than 1/60 seconds. In order not to miss them, we need a new system.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;b&gt;DirectX&lt;/b&gt;: This is necessary for some Windows like Arm Windows.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;b&gt;Vector graphics&lt;/b&gt;: There is &lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2/vector&#34;&gt;vector&lt;/a&gt; package, but this doesn&#39;t have many features. I want to add new features like anti-alias.&lt;/li&gt;&#xA;    &lt;li&gt;&lt;b&gt;Streaming games&lt;/b&gt;: By defining a protocol for graphics, a remote client can render it. This might be fun!&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;p&gt;&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/discussions/1850&#34;&gt;We are still discussing the roadmap&lt;/a&gt;.&lt;/p&gt;&#xA;  &lt;p&gt;I will continue to do things with the spirit of &#34;importance of doing even common tasks well&#34; for Ebiten. See you next year!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h2&gt;2022 年以降の Ebiten&lt;/h2&gt;&#xA;  &lt;p&gt;やりたいことはたくさんありますが、優先順位が決まっていません。ざっくりとやりたいことは次の通りです:&lt;/p&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;b&gt;IME 入力&lt;/b&gt;: GUI 作る際にあると便利ですね。&lt;/li&gt;&#xA;    &lt;li&gt;&lt;b&gt;入力イベントの取得&lt;/b&gt;: 今だと 60 FPS よりも細かい入力は無視されてしまいます。それを取りこぼさないために、新しい仕組みが必要です。&lt;/li&gt;&#xA;    &lt;li&gt;&lt;b&gt;DirectX&lt;/b&gt;: Arm Windows など一部の Windows で必要です。&lt;/li&gt;&#xA;    &lt;li&gt;&lt;b&gt;ベクターグラフィックス&lt;/b&gt;: 一応 &lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2/vector&#34;&gt;vector&lt;/a&gt; パッケージはあるのですが、機能があまりありません。アンチエイリアスなどもっと機能を充実させたいですね。&lt;/li&gt;&#xA;    &lt;li&gt;&lt;b&gt;ストリーミングゲーム&lt;/b&gt;: グラフィックスのプロトコルを決めて、リモートのクライアント側で描画できると面白いんじゃないか、という思いつきです。&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;p&gt;&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/discussions/1850&#34;&gt;ロードマップについては議論中です&lt;/a&gt;。&lt;/p&gt;&#xA;  &lt;p&gt;Ebiten はこれからも「凡事徹底」の精神でやってまいります。良いお年を。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;</content>
  </entry>
  <entry>
    <title>v2.2.0 is released</title>
    <id>https://ebiten.org/blog/v2.2.0.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/v2.2.0.html"></link>
    <published>2021-10-05T00:00:00+09:00</published>
    <updated>2021-10-05T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h1&gt;v2.2.0 is released&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2021-10-05&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;p&gt;I am very happy to announce the release of v2.2.0 (&lt;a href=&#34;/documents/2.2.html&#34;&gt;Release Note&lt;/a&gt;).&lt;/p&gt;&#xA;  &lt;p&gt;I appreciate all the contributors and &lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;all the sponsors&lt;/a&gt;. Thank you very much!&lt;/p&gt;&#xA;  &lt;p&gt;v2.2.0 includes these new features:&lt;/p&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.2.html#Nintendo_Switch™&#34;&gt;Supporting Nintendo Switch™&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.2.html#Audio_reimplementation&#34;&gt;New audio implementation&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.2.html#Standard_gamepad_layout_mappings&#34;&gt;Standard gamepad layout mappings&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.2.html#New_vector_graphics_APIs&#34;&gt;New vector graphics APIs&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.2.html#macOS&#39;s_native_fullscreen&#34;&gt;macOS&#39;s native fullscreen&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;etc.&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;p&gt;v2.2.0 also improves performance in terms of speed and memory usage.&lt;/p&gt;&#xA;  &lt;p&gt;I appreciate your feedbacks!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h1&gt;v2.2.0 がリリースされました&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2021-10-05&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;p&gt;v2.2.0 がリリースされました! 詳しくは&lt;a href=&#34;/documents/2.2.html&#34;&gt;リリースノート&lt;/a&gt;を参照してください。&lt;/p&gt;&#xA;  &lt;p&gt;すべてのコントリビューターと&lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;スポンサーの皆様&lt;/a&gt;に感謝いたします。どうもありがとうございます!&lt;/p&gt;&#xA;  &lt;p&gt;v2.2.0 に入った新しい機能は次のとおりです:&lt;/p&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.2.html#Nintendo_Switch™&#34;&gt;Nintendo Switch™ のサポート&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.2.html#オーディオ再実装&#34;&gt;オーディオの新しい実装&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.2.html#標準ゲームパッドマッピング&#34;&gt;標準ゲームパッドマッピング&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.2.html#ベクターグラフィック&#34;&gt;新しいベクターグラフィックス API&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;/documents/2.2.html#macOS_のネイティブフルスクリーン&#34;&gt;macOS のネイティブなフルスクリーン&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;その他&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;p&gt;v2.2.0 で、スピードやメモリ使用量などのパフォーマンス改善も行いました。&lt;/p&gt;&#xA;  &lt;p&gt;フィードバックお待ちしております!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;</content>
  </entry>
  <entry>
    <title>How to release an Ebiten game for Steam</title>
    <id>https://ebiten.org/blog/steam.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/steam.html"></link>
    <published>2021-08-29T00:00:00+09:00</published>
    <updated>2021-08-29T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h1 lang=&#34;en&#34;&gt;How to release an Ebiten game for Steam&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2021-08-29&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;p&gt;I have succeeded to release an Ebiten game &#34;&lt;a href=&#34;https://store.steampowered.com/app/1710390/__2007/&#34;&gt;INNO VATION 2007!&lt;/a&gt;&#34; at Steam store some days ago. It&#39;s a free game. It supports all the platforms Windows, macOS, and Linux. The source code is available at &lt;a href=&#34;https://github.com/hajimehoshi/go-inovation&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;  &lt;figure&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/steam/innovation2007.png&#34;&gt;&lt;/p&gt;&#xA;    &lt;figcaption&gt;Copyright 2007 Omega&lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;  &lt;p&gt;You have to pass a review to release your game at Steam. To pass a review, simply building an Ebiten game by Go is not enough. You have to do additional tasks. This artcile explains necessary items to pass a review for Ebiten games, but doesn&#39;t explain general things about Steamworks.&lt;/p&gt;&#xA;  &lt;p&gt;In the below explanation, we assume the game name is &lt;code&gt;yourgame&lt;/code&gt;, the user name is &lt;code&gt;Your Name&lt;/code&gt;, and so on. Please replace them as appropriate.&lt;/p&gt;&#xA;  &lt;h2&gt;Steamworks SDK&lt;/h2&gt;&#xA;  &lt;p&gt;There are Steam features like getting the user&#39;s language or unlocking achievements. They are available via &lt;a href=&#34;https://partner.steamgames.com/doc/sdk&#34;&gt;Steamworks SDK&lt;/a&gt;. The formats of the SDK are dynamic libraries like DLL and shared objects, so you have to take ingenuity to use them from Go.&lt;/p&gt;&#xA;  &lt;p&gt;Then, I created a binding called &lt;a href=&#34;https://github.com/hajimehoshi/go-steamworks&#34;&gt;&lt;code&gt;go-steamworks&lt;/code&gt;&lt;/a&gt;. You can use it just by importing. For example, you can write the process to reopen the application if the application was not opened via Steam client like this.&lt;p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;os&#34;&#xA;&#xA;&#x9;&#34;github.com/hajimehoshi/go-steamworks&#34;&#xA;)&#xA;&#xA;const appID = 480 // Use your application ID.&#xA;&#xA;func init() {&#xA;&#x9;if steamworks.RestartAppIfNecessary(appID) {&#xA;&#x9;&#x9;os.Exit(1)&#xA;&#x9;}&#xA;&#x9;if !steamworks.Init() {&#xA;&#x9;&#x9;panic(&#34;steamworks.Init failed&#34;)&#xA;&#x9;}&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;This binding doesn&#39;t implement most of the APIs. I plan to implement them in the future.&lt;/p&gt;&#xA;  &lt;h2&gt;Windows&lt;/h2&gt;&#xA;  &lt;p&gt;Windows is the easiest, and what you have to do is to build your game by Go in the regular way. On Windows, Ebiten is in pure Go, then you can build it anywhere by specifying &lt;code&gt;GOOS&lt;/code&gt; and &lt;code&gt;GOARCH&lt;/code&gt;.&lt;/p&gt;&#xA;  &lt;p&gt;On PowerShell, the commands are like this.&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;$Env:GOARCH = &#39;386&#39;&#xA;go build -o yourgame_windows_386.exe .&#xA;$Env:GOARCH = &#39;amd64&#39;&#xA;go build -o yourgame_windows_amd64.exe .&#xA;Remove-Item Env:GOARCH&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;On a POSIX shell, the commands are like this.&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;env GOOS=windows GOARCH=386 go build -o yourgame_windows_386.exe .&#xA;env GOOS=windows GOARCH=amd64 go build -o yourgame_windows_amd64.exe .&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;When buliding a GUI application for Windows, you can specify &lt;code&gt;-ldflags=-H=windowsgui&lt;/code&gt; to vanish the console. As Ebiten closes it automatically anyway, it is also fine not to specify this.&lt;/p&gt;&#xA;  &lt;p&gt;An icon is not necessary. If you care, please use a tool to embed resources as appropriate.&lt;/p&gt;&#xA;  &lt;p&gt;Then, compress the &lt;code&gt;exe&lt;/code&gt; files as zips, and upload them as builds at Steamworks.&lt;/p&gt;&#xA;  &lt;h2&gt;macOS&lt;/h2&gt;&#xA;  &lt;p&gt;In the case of macOS, you have to create an application as &lt;code&gt;.app&lt;/code&gt;. Besides, you have to get your application notarized by Apple. Apparently, notarizing an application is not mandatory to release games at Steam, but your application would not work at relatively new (10.15?) macOS, then we can say notarizing is a must. You have to register &lt;a href=&#34;https://developer.apple.com/&#34;&gt;Apple Developer&lt;/a&gt; to get your application notarized.&lt;/p&gt;&#xA;  &lt;p&gt;I refered a blog article &#34;&lt;a href=&#34;https://coldandold.com/posts/releasing-steam-game-on-mac/&#34;&gt;Releasing Steam Games on Mac Is a Monster Pain&lt;/a&gt;&#34; to write this article.&lt;/p&gt;&#xA;  &lt;p&gt;The architecture is assumed to be amd64. Unfortunately, Steamworks SDK doesn&#39;t support M1 (arm64) yet. (EDIT 2022-05-07: The latest Steamworks SDK now support M1 (arm64) now.)&lt;/p&gt;&#xA;  &lt;p&gt;First, prepare an icon file as &lt;code&gt;icns&lt;/code&gt; format. This format can be exported by opening e.g., an PNG file with &lt;code&gt;Preview.app&lt;/code&gt;. If you cannot find &lt;code&gt;icns&lt;/code&gt; in the list of exporting formats, it should be shown by opening the list with pressing Alt key.&lt;/p&gt;&#xA;  &lt;p&gt;Then, create a minimal &lt;code&gt;.app&lt;/code&gt; like this.&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;name=yourgame&#xA;app_name=YourGame.app&#xA;bundle_id=com.example.yourgame&#xA;&#xA;rm -rf ${app_name}&#xA;mkdir -p ${app_name}/Contents/MacOS&#xA;mkdir -p ${app_name}/Contents/Resources&#xA;env CGO_ENABLED=1 CGO_CFLAGS=-mmacosx-version-min=10.12 CGO_LDFLAGS=-mmacosx-version-min=10.12 GOARCH=amd64 go build -o ${app_name}/Contents/MacOS/${name} .&#xA;cp icon.icns ${app_name}/Contents/Resources/icon.icns&#xA;echo &#39;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple Computer//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;  &amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundlePackageType&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;APPL&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundleInfoDictionaryVersion&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;6.0&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundleExecutable&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;{{.Name}}&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundleIdentifier&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;{{.BundleID}}&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundleIconFile&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;icon.icns&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundleVersion&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;0.0.0&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundleShortVersionString&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;0.0.0&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;NSHighResolutionCapable&amp;lt;/key&amp;gt;&#xA;    &amp;lt;true /&amp;gt;&#xA;    &amp;lt;key&amp;gt;LSMinimumSystemVersion&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;10.12.0&amp;lt;/string&amp;gt;&#xA;  &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#39; |&#xA;    sed -e &#34;s/{{.Name}}/${name}/g&#34; |&#xA;    sed -e &#34;s/{{.BundleID}}/${bundle_id}/g&#34; &amp;gt; ${app_name}/Contents/Info.plist&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;This specifies &lt;code&gt;-mmacosx-version-min=10.12&lt;/code&gt; at &lt;code&gt;CGO_CLAGS&lt;/code&gt; and &lt;code&gt;CGO_LDFLAGS&lt;/code&gt;. Without this, your application would not work on an older macOS than yours.&lt;/p&gt;&#xA;  &lt;p&gt;Next, create an app ID (bundle ID) at &lt;a href=&#34;https://developer.apple.com/account/&#34;&gt;Apple Developer&#39;s account page&lt;/a&gt; if you don&#39;t have one.&lt;/p&gt;&#xA;  &lt;figure&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/steam/app_id.png&#34;&gt;&lt;/p&gt;&#xA;  &lt;/figure&gt;&#xA;  &lt;p&gt;Next, create a certificate of Developer ID (Developer ID Application) at &lt;a href=&#34;https://developer.apple.com/account/&#34;&gt;Apple Developer&#39;s account page&lt;/a&gt; if you don&#39;t have one.&lt;/p&gt;&#xA;  &lt;figure&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/steam/developer_id_application.png&#34;&gt;&lt;/p&gt;&#xA;  &lt;/figure&gt;&#xA;  &lt;p&gt;Next, create an app-specific password. You can create one easily at &lt;a href=&#34;https://appleid.apple.com/&#34;&gt;Apple ID website&lt;/a&gt;. For more details, see &lt;a href=&#34;https://support.apple.com/en-us/HT204397&#34;&gt;the help page&lt;/a&gt;.&lt;/p&gt;&#xA;  &lt;p&gt;Next, get your application notarized.&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;name=yourgame&#xA;app_name=YourGame.app&#xA;bundle_id=com.example.yourgame&#xA;email=yourname@example.com&#xA;developer_name=&#39;Developer ID Application: Your Name (1234567890)&#39;&#xA;asc_provider=1234567890&#xA;&#xA;mkdir -p .cache&#xA;&#xA;echo &#39;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;  &amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;com.apple.security.cs.disable-library-validation&amp;lt;/key&amp;gt;&#xA;    &amp;lt;true/&amp;gt;&#xA;    &amp;lt;key&amp;gt;com.apple.security.cs.allow-dyld-environment-variables&amp;lt;/key&amp;gt;&#xA;    &amp;lt;true/&amp;gt;&#xA;  &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#39; &amp;gt; .cache/entitlements.plist&#xA;&#xA;codesign --display \&#xA;         --verbose \&#xA;         --verify \&#xA;         --sign &#34;${developer_name}&#34; \&#xA;         --timestamp \&#xA;         --options runtime \&#xA;         --force \&#xA;         --entitlements .cache/entitlements.plist \&#xA;         --deep \&#xA;         ${app_name}&#xA;&#xA;ditto -c -k --keepParent ${app_name} ${app_name}.zip&#xA;&#xA;if [[ -z &#34;${APP_SPECIFIC_PASSWORD}&#34; ]]; then&#xA;    echo &#39;fail: set APP_SPECIFIC_PASSWORD. See https://support.apple.com/en-us/HT204397&#39;&#xA;    exit 1&#xA;fi&#xA;&#xA;xcrun altool --notarize-app \&#xA;             --primary-bundle-id &#34;${bundle_id}&#34; \&#xA;             --username &#34;${email}&#34; \&#xA;             --password &#34;${APP_SPECIFIC_PASSWORD}&#34; \&#xA;             --asc-provider &#34;${asc_provider}&#34; \&#xA;             --file ${app_name}.zip&#xA;rm ${app_name}.zip&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;After executing these commands, a UUID for the notarization transaction is shown. After 5 minutes or so, you will receive an email from Apple.&lt;/p&gt;&#xA;  &lt;p&gt;If you succeed notarization, execute this command.&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;xcrun stapler staple YourGame.app&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;If you want to see notarization logs, execute this command. Replace the arguments with appropriate values. This command shows a URL, which showns logs. If you fail the notarization, the reasons should be written there.&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;xcrun altool --notarization-info UUID --username YOUR_MAIL_ADDRESS --password APP_SPECIFIC_PASSWORD&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;When you want to upload your &lt;code&gt;.app&lt;/code&gt; as a build at Steamworks, you should not compress this by &lt;code&gt;zip&lt;/code&gt; command or a menu at Finder. A notarized &lt;code&gt;.app&lt;/code&gt; includes some special files and they might be missing if you create a &lt;code&gt;zip&lt;/code&gt; in a regular way. Instead, use &lt;code&gt;ditto&lt;/code&gt; command to create a zip.&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;ditto -c -k --keepParent YourGame.app yourgame_darwin_amd64.zip&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;h2&gt;Linux&lt;/h2&gt;&#xA;  &lt;p&gt;In the case of Linux, &lt;a href=&#34;https://github.com/ValveSoftware/steam-runtime&#34;&gt;Steam Runtime&lt;/a&gt; is prepared as a Dockerfile. Buliding your application in this environment is the easiest way.&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;name=yourgame&#xA;STEAM_RUNTIME_VERSION=0.20210817.0&#xA;GO_VERSION=$(go env GOVERSION)&#xA;&#xA;mkdir -p .cache/${STEAM_RUNTIME_VERSION}&#xA;&#xA;# Download binaries for 386.&#xA;if [[ ! -f .cache/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-i386-scout-sysroot.Dockerfile ]]; then&#xA;    (cd .cache/${STEAM_RUNTIME_VERSION}; curl --location --remote-name https://repo.steampowered.com/steamrt-images-scout/snapshots/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-i386-scout-sysroot.Dockerfile)&#xA;fi&#xA;if [[ ! -f .cache/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-i386-scout-sysroot.tar.gz ]]; then&#xA;    (cd .cache/${STEAM_RUNTIME_VERSION}; curl --location --remote-name https://repo.steampowered.com/steamrt-images-scout/snapshots/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-i386-scout-sysroot.tar.gz)&#xA;fi&#xA;if [[ ! -f .cache/${GO_VERSION}.linux-386.tar.gz ]]; then&#xA;    (cd .cache; curl --location --remote-name https://golang.org/dl/${GO_VERSION}.linux-386.tar.gz)&#xA;fi&#xA;&#xA;# Download binaries for amd64.&#xA;if [[ ! -f .cache/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-amd64,i386-scout-sysroot.Dockerfile ]]; then&#xA;    (cd .cache/${STEAM_RUNTIME_VERSION}; curl --location --remote-name https://repo.steampowered.com/steamrt-images-scout/snapshots/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-amd64,i386-scout-sysroot.Dockerfile)&#xA;fi&#xA;if [[ ! -f .cache/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-amd64,i386-scout-sysroot.tar.gz ]]; then&#xA;    (cd .cache/${STEAM_RUNTIME_VERSION}; curl --location --remote-name https://repo.steampowered.com/steamrt-images-scout/snapshots/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-amd64,i386-scout-sysroot.tar.gz)&#xA;fi&#xA;if [[ ! -f .cache/${GO_VERSION}.linux-amd64.tar.gz ]]; then&#xA;    (cd .cache; curl --location --remote-name https://golang.org/dl/${GO_VERSION}.linux-amd64.tar.gz)&#xA;fi&#xA;&#xA;# Build for 386.&#xA;(cd .cache/${STEAM_RUNTIME_VERSION}; docker build -f com.valvesoftware.SteamRuntime.Sdk-i386-scout-sysroot.Dockerfile -t steamrt_scout_i386:latest .)&#xA;docker run --rm --workdir=/work --volume $(pwd):/work steamrt_scout_i386:latest /bin/sh -c &#34;&#xA;export PATH=\$PATH:/usr/local/go/bin&#xA;export CGO_CFLAGS=-std=gnu99&#xA;&#xA;rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf .cache/${GO_VERSION}.linux-386.tar.gz&#xA;&#xA;go build -o ${name}_linux_386 .&#xA;&#34;&#xA;&#xA;# Build for amd64.&#xA;(cd .cache/${STEAM_RUNTIME_VERSION}; docker build -f com.valvesoftware.SteamRuntime.Sdk-amd64,i386-scout-sysroot.Dockerfile -t steamrt_scout_amd64:latest .)&#xA;docker run --rm --workdir=/work --volume $(pwd):/work steamrt_scout_amd64:latest /bin/sh -c &#34;&#xA;export PATH=\$PATH:/usr/local/go/bin&#xA;export CGO_CFLAGS=-std=gnu99&#xA;&#xA;rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf .cache/${GO_VERSION}.linux-amd64.tar.gz&#xA;&#xA;go build -o ${name}_linux_amd64 .&#xA;&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;Then, compress &lt;code&gt;yourgame_linux_386&lt;/code&gt; and &lt;code&gt;yourgame_linux_amd64&lt;/code&gt; as zips, and upload them as builds at Steamworks.&lt;/p&gt;&#xA;  &lt;h2&gt;Misc.&lt;/h2&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;I strongly recommend to adjust your account settings to enable to download &lt;a href=&#34;https://partner.steamgames.com/doc/store/testing&#34;&gt;Dev Comp package&lt;/a&gt;. You can test your application in a production-like environment by putting it at the original place where your game is downloaded by Steam (&lt;code&gt;steamapps/common/yourgame&lt;/code&gt;).&lt;/li&gt;&#xA;    &lt;li&gt;You need at least 5 screenshots that are NOT titles, menus or loading. I fell into this trap.&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;p&gt;I hope this article will help you with releasing your Ebiten games at Steam.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h1 lang=&#34;ja&#34;&gt;Steam に Ebiten ゲームをリリースする方法&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2021-08-29&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;p&gt;先日、 Ebiten 製ゲーム「&lt;a href=&#34;https://store.steampowered.com/app/1710390/__2007/&#34;&gt;いの べーしょん 2007!&lt;/a&gt;」を Steam ストアでリリースすることに成功しました。無料ゲームです。 Windows、 macOS、 Linux の全プラットフォームに対応させました。なおソースコードは &lt;a href=&#34;https://github.com/hajimehoshi/go-inovation&#34;&gt;GitHub&lt;/a&gt; にて公開されています。&lt;/p&gt;&#xA;  &lt;figure&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/steam/innovation2007.png&#34;&gt;&lt;/p&gt;&#xA;    &lt;figcaption&gt;Copyright 2007 Omega&lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;  &lt;p&gt;Steam でゲームをリリースするためには審査が必要です。審査を通すためには、単に Ebiten ゲームを Go でビルドするだけではありません。様々な作業が必要になります。この記事では Ebiten ゲームを審査に通すために必要な事項をまとめます。 Steamworks の一般的な解説は省きます。&lt;/p&gt;&#xA;  &lt;p&gt;以下の説明では、ゲーム名を &lt;code&gt;yourgame&lt;/code&gt;、ユーザー名を &lt;code&gt;Your Name&lt;/code&gt; などにしています。適宜読み替えてください。&lt;/p&gt;&#xA;  &lt;h2&gt;Steamworks SDK&lt;/h2&gt;&#xA;  &lt;p&gt;Steam の機能にはユーザーの言語取得や実績解除などがあります。それらは &lt;a href=&#34;https://partner.steamgames.com/doc/sdk&#34;&gt;Steamworks SDK&lt;/a&gt; 経由で呼び出されます。 SDK のファイル形式は DLL や so ファイルなどの動的ライブラリなので、 Go から使うためには一工夫必要です。&lt;/p&gt;&#xA;  &lt;p&gt;そこで、 &lt;a href=&#34;https://github.com/hajimehoshi/go-steamworks&#34;&gt;&lt;code&gt;go-steamworks&lt;/code&gt;&lt;/a&gt; というバインディングを作りました。 import するだけで使えます。例えば、「Steam クライアント経由で開いていなかったら開き直す」処理は次のように書けます。&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;os&#34;&#xA;&#xA;&#x9;&#34;github.com/hajimehoshi/go-steamworks&#34;&#xA;)&#xA;&#xA;const appID = 480 // Use your application ID.&#xA;&#xA;func init() {&#xA;&#x9;if steamworks.RestartAppIfNecessary(appID) {&#xA;&#x9;&#x9;os.Exit(1)&#xA;&#x9;}&#xA;&#x9;if !steamworks.Init() {&#xA;&#x9;&#x9;panic(&#34;steamworks.Init failed&#34;)&#xA;&#x9;}&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;なおこのバインディングはまだ API をほとんど実装していません。今後対応予定です。&lt;/p&gt;&#xA;  &lt;h2&gt;Windows&lt;/h2&gt;&#xA;  &lt;p&gt;Windows は最も簡単で、普通に Go でビルドするだけです。 Ebiten は Windows においては Pure Go なので、 &lt;code&gt;GOOS&lt;/code&gt; と &lt;code&gt;GOARCH&lt;/code&gt; を指定すればどこでもビルドできます。&lt;/p&gt;&#xA;  &lt;p&gt;PowerShell でビルドする場合は次のようになります。&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;$Env:GOARCH = &#39;386&#39;&#xA;go build -o yourgame_windows_386.exe .&#xA;$Env:GOARCH = &#39;amd64&#39;&#xA;go build -o yourgame_windows_amd64.exe .&#xA;Remove-Item Env:GOARCH&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;POSIX シェルでビルドする場合は次のようになります。&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;env GOOS=windows GOARCH=386 go build -o yourgame_windows_386.exe .&#xA;env GOOS=windows GOARCH=amd64 go build -o yourgame_windows_amd64.exe .&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;Windows 向け GUI アプリをビルドする際には &lt;code&gt;-ldflags=-H=windowsgui&lt;/code&gt; をつけると、最初のコンソールの表示がなくなります。 Ebiten の場合はコンソールを自動で閉じるので、つけなくても問題はありません。&lt;/p&gt;&#xA;  &lt;p&gt;アイコンは必須ではありません。気になる方はリソースを埋め込むツールを適宜使ってください。&lt;/p&gt;&#xA;  &lt;p&gt;こうして出来上がった &lt;code&gt;exe&lt;/code&gt; ファイルを zip で固めて、 Steamworks にビルドとしてアップロードしてください。&lt;/p&gt;&#xA;  &lt;h2&gt;macOS&lt;/h2&gt;&#xA;  &lt;p&gt;macOS の場合は &lt;code&gt;.app&lt;/code&gt; 形式のアプリケーションを作る必要があります。また Apple から&lt;a href=&#34;https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution&#34;&gt;公証 (Notarization)&lt;/a&gt; を受ける必要があります。公証は、 Steam 審査のためには厳密には必須ではないらしいのですが、ないと新しめ (10.15 以降?) の macOS では動かなくなるので、ほぼ必須といってよいでしょう。公証を受けるためには &lt;a href=&#34;https://developer.apple.com/&#34;&gt;Apple Developer&lt;/a&gt; の登録が必須です。&lt;/p&gt;&#xA;  &lt;p&gt;本記事作成にあたって、ブログ記事 &lt;a href=&#34;https://coldandold.com/posts/releasing-steam-game-on-mac/&#34;&gt;Releasing Steam Games on Mac Is a Monster Pain&lt;/a&gt; を参考にしました。&lt;/p&gt;&#xA;  &lt;p&gt;アーキテクチャは amd64 を前提とします。残念ながら、 Steamworks SDK が M1 (arm64) にまだ対応していないようです。 (EDIT 2022-05-07: 最新の Steamworks SDK は M1 (arm64) をサポートしています。)&lt;/p&gt;&#xA;  &lt;p&gt;まずアイコンファイルを &lt;code&gt;icns&lt;/code&gt; 形式で用意します。この形式は PNG などを &lt;code&gt;Preview.app&lt;/code&gt; で開いてエクスポートするだけで作れます。エクスポートのフォーマット一覧に出てこない場合は、 Alt キーを押しながらフォーマット一覧を開くと出てきます。&lt;/p&gt;&#xA;  &lt;p&gt;次に必要最小限の &lt;code&gt;.app&lt;/code&gt; を次のように作ります。&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;name=yourgame&#xA;app_name=YourGame.app&#xA;bundle_id=com.example.yourgame&#xA;&#xA;rm -rf ${app_name}&#xA;mkdir -p ${app_name}/Contents/MacOS&#xA;mkdir -p ${app_name}/Contents/Resources&#xA;env CGO_ENABLED=1 CGO_CFLAGS=-mmacosx-version-min=10.12 CGO_LDFLAGS=-mmacosx-version-min=10.12 GOARCH=amd64 go build -o ${app_name}/Contents/MacOS/${name} .&#xA;cp icon.icns ${app_name}/Contents/Resources/icon.icns&#xA;echo &#39;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple Computer//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;  &amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundlePackageType&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;APPL&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundleInfoDictionaryVersion&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;6.0&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundleExecutable&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;{{.Name}}&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundleIdentifier&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;{{.BundleID}}&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundleIconFile&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;icon.icns&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundleVersion&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;0.0.0&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;CFBundleShortVersionString&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;0.0.0&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;NSHighResolutionCapable&amp;lt;/key&amp;gt;&#xA;    &amp;lt;true /&amp;gt;&#xA;    &amp;lt;key&amp;gt;LSMinimumSystemVersion&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;10.12.0&amp;lt;/string&amp;gt;&#xA;  &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#39; |&#xA;    sed -e &#34;s/{{.Name}}/${name}/g&#34; |&#xA;    sed -e &#34;s/{{.BundleID}}/${bundle_id}/g&#34; &amp;gt; ${app_name}/Contents/Info.plist&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;&lt;code&gt;CGO_CFLAGS&lt;/code&gt; と &lt;code&gt;CGO_LDFLAGS&lt;/code&gt; に &lt;code&gt;-mmacosx-version-min=10.12&lt;/code&gt; を指定しています。この指定がないと、ビルドした環境より古い macOS で動かなくなってしまいます。&lt;/p&gt;&#xA;  &lt;p&gt;次に App ID (Bundle ID) を、 &lt;a href=&#34;https://developer.apple.com/account/&#34;&gt;Apple Developer の Account ページ&lt;/a&gt;で、ない場合は作成します。&lt;/p&gt;&#xA;  &lt;figure&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/steam/app_id.png&#34;&gt;&lt;/p&gt;&#xA;  &lt;/figure&gt;&#xA;  &lt;p&gt;次に Developer ID (Developer ID Application) の Certificate を、 &lt;a href=&#34;https://developer.apple.com/account/&#34;&gt;Apple Developer の Account ページ&lt;/a&gt;で、ない場合は作成します。&lt;/p&gt;&#xA;  &lt;figure&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/steam/developer_id_application.png&#34;&gt;&lt;/p&gt;&#xA;  &lt;/figure&gt;&#xA;  &lt;p&gt;次に App-Specific Password を作ります。 &lt;a href=&#34;https://appleid.apple.com/&#34;&gt;Apple ID のサイト&lt;/a&gt;から簡単に作れます。詳しくは &lt;a href=&#34;https://support.apple.com/en-us/HT204397&#34;&gt;Apple のヘルプページ&lt;/a&gt;を参考にしてください。&lt;/p&gt;&#xA;  &lt;p&gt;次に公証を受けます。&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;name=yourgame&#xA;app_name=YourGame.app&#xA;bundle_id=com.example.yourgame&#xA;email=yourname@example.com&#xA;developer_name=&#39;Developer ID Application: Your Name (1234567890)&#39;&#xA;asc_provider=1234567890&#xA;&#xA;mkdir -p .cache&#xA;&#xA;echo &#39;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;  &amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;com.apple.security.cs.disable-library-validation&amp;lt;/key&amp;gt;&#xA;    &amp;lt;true/&amp;gt;&#xA;    &amp;lt;key&amp;gt;com.apple.security.cs.allow-dyld-environment-variables&amp;lt;/key&amp;gt;&#xA;    &amp;lt;true/&amp;gt;&#xA;  &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#39; &amp;gt; .cache/entitlements.plist&#xA;&#xA;codesign --display \&#xA;         --verbose \&#xA;         --verify \&#xA;         --sign &#34;${developer_name}&#34; \&#xA;         --timestamp \&#xA;         --options runtime \&#xA;         --force \&#xA;         --entitlements .cache/entitlements.plist \&#xA;         --deep \&#xA;         ${app_name}&#xA;&#xA;ditto -c -k --keepParent ${app_name} ${app_name}.zip&#xA;&#xA;if [[ -z &#34;${APP_SPECIFIC_PASSWORD}&#34; ]]; then&#xA;    echo &#39;fail: set APP_SPECIFIC_PASSWORD. See https://support.apple.com/en-us/HT204397&#39;&#xA;    exit 1&#xA;fi&#xA;&#xA;xcrun altool --notarize-app \&#xA;             --primary-bundle-id &#34;${bundle_id}&#34; \&#xA;             --username &#34;${email}&#34; \&#xA;             --password &#34;${APP_SPECIFIC_PASSWORD}&#34; \&#xA;             --asc-provider &#34;${asc_provider}&#34; \&#xA;             --file ${app_name}.zip&#xA;rm ${app_name}.zip&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;実行すると公証のトランザクション UUID が表示されます。 5 分くらい待つと Apple からメールが来るはずです。&lt;/p&gt;&#xA;  &lt;p&gt;公証に成功した場合は次のコマンドを実行してください。&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;xcrun stapler staple YourGame.app&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;公証のログを見たい場合は、次のコマンドを実行してください。引数は適切な値に置き換えてください。コマンドを実行すると URL が表示され、それにアクセスすると現在の状況が見れます。失敗した場合は失敗理由も書いてあるはずです。&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;xcrun altool --notarization-info UUID --username YOUR_MAIL_ADDRESS --password APP_SPECIFIC_PASSWORD&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;こうして出来上がった &lt;code&gt;.app&lt;/code&gt; を Steamworks にビルドとしてアップロードする際、 &lt;code&gt;zip&lt;/code&gt; コマンドや Finder のメニューで zip ファイルを作ってはいけません。公証を受けた &lt;code&gt;.app&lt;/code&gt; には特殊なファイルをが含まれていて、普通に zip を作ろうとするとそのファイルが欠落してしまいます。代わりに &lt;code&gt;ditto&lt;/code&gt; コマンドを使って zip ファイルを作ります。&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;ditto -c -k --keepParent YourGame.app yourgame_darwin_amd64.zip&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;h2&gt;Linux&lt;/h2&gt;&#xA;  &lt;p&gt;Linux の場合は &lt;a href=&#34;https://github.com/ValveSoftware/steam-runtime&#34;&gt;Steam Runtime&lt;/a&gt; が Dockerfile として用意されています。その環境下でビルドするのが最も簡単です。&lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code&gt;name=yourgame&#xA;STEAM_RUNTIME_VERSION=0.20210817.0&#xA;GO_VERSION=$(go env GOVERSION)&#xA;&#xA;mkdir -p .cache/${STEAM_RUNTIME_VERSION}&#xA;&#xA;# Download binaries for 386.&#xA;if [[ ! -f .cache/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-i386-scout-sysroot.Dockerfile ]]; then&#xA;    (cd .cache/${STEAM_RUNTIME_VERSION}; curl --location --remote-name https://repo.steampowered.com/steamrt-images-scout/snapshots/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-i386-scout-sysroot.Dockerfile)&#xA;fi&#xA;if [[ ! -f .cache/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-i386-scout-sysroot.tar.gz ]]; then&#xA;    (cd .cache/${STEAM_RUNTIME_VERSION}; curl --location --remote-name https://repo.steampowered.com/steamrt-images-scout/snapshots/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-i386-scout-sysroot.tar.gz)&#xA;fi&#xA;if [[ ! -f .cache/${GO_VERSION}.linux-386.tar.gz ]]; then&#xA;    (cd .cache; curl --location --remote-name https://golang.org/dl/${GO_VERSION}.linux-386.tar.gz)&#xA;fi&#xA;&#xA;# Download binaries for amd64.&#xA;if [[ ! -f .cache/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-amd64,i386-scout-sysroot.Dockerfile ]]; then&#xA;    (cd .cache/${STEAM_RUNTIME_VERSION}; curl --location --remote-name https://repo.steampowered.com/steamrt-images-scout/snapshots/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-amd64,i386-scout-sysroot.Dockerfile)&#xA;fi&#xA;if [[ ! -f .cache/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-amd64,i386-scout-sysroot.tar.gz ]]; then&#xA;    (cd .cache/${STEAM_RUNTIME_VERSION}; curl --location --remote-name https://repo.steampowered.com/steamrt-images-scout/snapshots/${STEAM_RUNTIME_VERSION}/com.valvesoftware.SteamRuntime.Sdk-amd64,i386-scout-sysroot.tar.gz)&#xA;fi&#xA;if [[ ! -f .cache/${GO_VERSION}.linux-amd64.tar.gz ]]; then&#xA;    (cd .cache; curl --location --remote-name https://golang.org/dl/${GO_VERSION}.linux-amd64.tar.gz)&#xA;fi&#xA;&#xA;# Build for 386&#xA;(cd .cache/${STEAM_RUNTIME_VERSION}; docker build -f com.valvesoftware.SteamRuntime.Sdk-i386-scout-sysroot.Dockerfile -t steamrt_scout_i386:latest .)&#xA;docker run --rm --workdir=/work --volume $(pwd):/work steamrt_scout_i386:latest /bin/sh -c &#34;&#xA;export PATH=\$PATH:/usr/local/go/bin&#xA;export CGO_CFLAGS=-std=gnu99&#xA;&#xA;rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf .cache/${GO_VERSION}.linux-386.tar.gz&#xA;&#xA;go build -o ${name}_linux_386 .&#xA;&#34;&#xA;&#xA;# Build for amd64&#xA;(cd .cache/${STEAM_RUNTIME_VERSION}; docker build -f com.valvesoftware.SteamRuntime.Sdk-amd64,i386-scout-sysroot.Dockerfile -t steamrt_scout_amd64:latest .)&#xA;docker run --rm --workdir=/work --volume $(pwd):/work steamrt_scout_amd64:latest /bin/sh -c &#34;&#xA;export PATH=\$PATH:/usr/local/go/bin&#xA;export CGO_CFLAGS=-std=gnu99&#xA;&#xA;rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf .cache/${GO_VERSION}.linux-amd64.tar.gz&#xA;&#xA;go build -o ${name}_linux_amd64 .&#xA;&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;p&gt;出来上がった &lt;code&gt;yourgame_linux_386&lt;/code&gt; および &lt;code&gt;yourgame_linux_amd64&lt;/code&gt; をそれぞれ zip に固めて、 Steamworks にビルドとしてアップロードしてください。&lt;/p&gt;&#xA;  &lt;h2&gt;その他&lt;/h2&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;https://partner.steamgames.com/doc/store/testing&#34;&gt;Dev Comp パッケージ&lt;/a&gt;をダウンロードできるようにアカウントを設定することを強く推奨します。 Steam でゲームがダウンロードされる本来の箇所 (&lt;code&gt;steamapps/common/yourgame&lt;/code&gt;) で実行ファイルを置き換えることで、本番に近いテストが行なえます。&lt;/li&gt;&#xA;    &lt;li&gt;スクリーンショットとして、タイトル、メニュー、ローディング&lt;em&gt;以外&lt;/em&gt;の画面が 5 枚必要です。筆者はこれにハマりました。&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &lt;p&gt;本記事が Ebiten ゲームの Steam リリースの一助になれば幸いです。&lt;p&gt;&#xA;&lt;/div&gt;&#xA;</content>
  </entry>
  <entry>
    <title>Ebiten now supports Nintendo Switch™!</title>
    <id>https://ebiten.org/blog/nintendo_switch.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/nintendo_switch.html"></link>
    <published>2021-06-11T00:00:00+09:00</published>
    <updated>2021-06-11T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h1&gt;Ebiten now supports Nintendo Switch™!&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2021-06-11&lt;/span&gt;&lt;/p&gt;&#xA;    &lt;div class=&#34;grid-container&#34;&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;p&gt;Thanks to the cooperation of &lt;a href=&#34;https://odencat.com/&#34;&gt;Odencat Inc.&lt;/a&gt;, Ebiten now officially supports Nintendo Switch™! Ebiten games written in Go will run on Nintendo Switch almost without modification.&lt;/p&gt;&#xA;      &lt;p&gt;The tool is not open source. In order to develop for Nintendo Switch, you need to sign the developer agreement for Nintendo platform with Nintendo. For more information, please see &lt;a href=&#34;https://developer.nintendo.com/&#34;&gt;Nintendo Developer Portal&lt;/a&gt;, the portal site for Nintendo platform developers.&lt;/p&gt;&#xA;      &lt;p&gt;In addition, &#34;&lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/&#34;&gt;Bear&#39;s Restaurant&lt;/a&gt;&#34; is scheduled to be released as a game for Nintendo Switch using Ebiten. Please look forward to it!&lt;/p&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;figure&gt;&#xA;        &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/&#34;&gt;&lt;img src=&#34;/images/blog/nintendo_switch/bearsrestaurant_en.jpg&#34; width=&#34;360&#34; alt=&#34;Bear&#39;s Restaurant&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;        &lt;figcaption&gt;Copyright 2021 Odencat Inc.&lt;/figcaption&gt;&#xA;      &lt;/figure&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h1&gt;Ebiten が Nintendo Switch™ をサポートしました!&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2021-06-11&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;div class=&#34;grid-container&#34;&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;p&gt;&lt;a href=&#34;https://odencat.com/&#34;&gt;Odencat 株式会社&lt;/a&gt;の協力により、Ebiten が Nintendo Switch™ に正式対応しました! Go で書かれた Ebiten のゲームが、ほぼそのまま Nintendo Switch で動きます。&lt;/p&gt;&#xA;      &lt;p&gt;ツールはオープンソースではありません。 Nintendo Switch 向けの開発を行うためには、任天堂株式会社と任天堂プラットフォームのデベロッパー契約を結ぶ必要があります。詳しくは任天堂プラットフォーム開発者向けポータルサイト &lt;a href=&#34;https://developer.nintendo.com/&#34;&gt;Nintendo Developer Portal&lt;/a&gt; をご覧ください。&lt;/p&gt;&#xA;      &lt;p&gt;また、 Ebiten を使った Nintendo Switch 向けゲームとして、「&lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/&#34;&gt;くまのレストラン&lt;/a&gt;」がリリース予定です。お楽しみに!&lt;/p&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;      &lt;figure&gt;&#xA;        &lt;p class=&#34;img thumbnail&#34;&gt;&lt;a href=&#34;https://odencat.com/bearsrestaurant/switch/&#34;&gt;&lt;img src=&#34;/images/blog/nintendo_switch/bearsrestaurant_ja.jpg&#34; width=&#34;360&#34; alt=&#34;くまのレストラン&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;        &lt;figcaption&gt;Copyright 2021 Odencat 株式会社&lt;/figcaption&gt;&#xA;      &lt;/figure&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;</content>
  </entry>
  <entry>
    <title>v2.1.0 is released</title>
    <id>https://ebiten.org/blog/v2.1.0.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/v2.1.0.html"></link>
    <published>2021-05-01T00:00:00+09:00</published>
    <updated>2021-05-01T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;div lang=&#34;en&#34;&gt;&#xA;  &lt;h1&gt;v2.1.0 is released&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2021-05-01&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;p&gt;I am very happy to announce the release of v2.1.0 (&lt;a href=&#34;/documents/2.1.html&#34;&gt;Release Note&lt;/a&gt;).&lt;/p&gt;&#xA;  &lt;p&gt;I appreciate all the contributors and &lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;all the sponsors&lt;/a&gt;. Thank you very much!&lt;/p&gt;&#xA;  &lt;p&gt;We focused performence tuning and stability on this release. The main new feature is supporting system cursors and new key constants.&lt;/p&gt;&#xA;  &lt;p&gt;I&#39;m afraid I have nothing to announce about supporting Nintendo Switch so far. Please stay tuned!&lt;/p&gt;&#xA;  &lt;p&gt;I also released &lt;a href=&#34;/documents/1.12.html#v1.12.12&#34;&gt;v1.12.12&lt;/a&gt; and &lt;a href=&#34;/documents/2.0.html#v2.0.9&#34;&gt;v2.0.9&lt;/a&gt;. v1.12.12 is the last release of v1. If you are still using v1, I strongly recommend to &lt;a href=&#34;/documents/to_v2.html&#34;&gt;migrate to v2&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div lang=&#34;ja&#34;&gt;&#xA;  &lt;h1&gt;v2.1.0 がリリースされました&lt;/h1&gt;&#xA;  &lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2021-05-01&lt;/span&gt;&lt;/p&gt;&#xA;  &lt;p&gt;v2.1.0 がリリースされました! 詳しくは&lt;a href=&#34;/documents/2.1.html&#34;&gt;リリースノート&lt;/a&gt;を参照してください。&lt;/p&gt;&#xA;  &lt;p&gt;すべてのコントリビューターと&lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;スポンサーの皆様&lt;/a&gt;に感謝いたします。どうもありがとうございます!&lt;/p&gt;&#xA;  &lt;p&gt;今リリースはパフォーマンスチューニングと安定性に注力しました。主な新しい機能は、システムカーソルと新しいキー定数です。&lt;/p&gt;&#xA;  &lt;p&gt;誠に恐縮ですが、 Nintendo Switch のサポートについては、現在のところ発表できることは何もありません。もうしばらくお待ち下さい。&lt;/p&gt;&#xA;  &lt;p&gt;また、 &lt;a href=&#34;/documents/1.12.html#v1.12.12&#34;&gt;v1.12.12&lt;/a&gt; と &lt;a href=&#34;/documents/2.0.html#v2.0.9&#34;&gt;v2.0.9&lt;/a&gt; もリリースされました。 v1.12.12 は v1 最後のバージョンです。未だ v1 を使っている方は、&lt;a href=&#34;/documents/to_v2.html&#34;&gt;v2 への移行&lt;/a&gt;を強く推奨します。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;</content>
  </entry>
  <entry>
    <title>Ebiten in 2020</title>
    <id>https://ebiten.org/blog/2020.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/2020.html"></link>
    <published>2020-12-15T00:00:00+09:00</published>
    <updated>2020-12-15T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;style&gt;&#xA;  .avatar img {&#xA;      border-radius: 50%;&#xA;  }&#xA;&lt;/style&gt;&#xA;&lt;h1 lang=&#34;en&#34;&gt;Ebiten in 2020&lt;/h1&gt;&#xA;&lt;h1 lang=&#34;ja&#34;&gt;2020 年の Ebiten&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2020-12-15&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;It&#39;s been 7 years since I started to develop Ebiten. This article is a retrospective of Ebiten in 2020.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;自分が Ebiten を開発し始めてから 7 年になりました。この記事は、 2020 年の Ebiten の回顧録です。&lt;/p&gt;&#xA;&lt;h2 lang=&#34;en&#34;&gt;Sponsors&lt;/h2&gt;&#xA;&lt;h2 lang=&#34;ja&#34;&gt;スポンサー&lt;/h2&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;These people &lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;sponsored&lt;/a&gt; me in between December 2019 and November 2020. I can&#39;t thank you enough!&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;2019 年 12 月から 2020 年 11 月の間、以下の方々に&lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;スポンサー&lt;/a&gt;していただきました。心より感謝いたします。&lt;/p&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;(In the order of total sponsoring amounts)&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;(スポンサー総額の大きい順、敬称略)&lt;/p&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/silbinarywolf&#34;&gt;&lt;img src=&#34;https://github.com/silbinarywolf.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/silbinarywolf&#34;&gt;Jae Bentvelzen&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/zacharyburkett&#34;&gt;&lt;img src=&#34;https://github.com/zacharyburkett.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/zacharyburkett&#34;&gt;Zachary Burkett&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/Inkeliz&#34;&gt;&lt;img src=&#34;https://github.com/Inkeliz.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/Inkeliz&#34;&gt;Inkeliz&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/jawr&#34;&gt;&lt;img src=&#34;https://github.com/jawr.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/jawr&#34;&gt;jawr&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/kaepora&#34;&gt;&lt;img src=&#34;https://github.com/kaepora.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/kaepora&#34;&gt;Nadim Kobeissi&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/cdemers&#34;&gt;&lt;img src=&#34;https://github.com/cdemers.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/cdemers&#34;&gt;Charle Demers&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/Jack-Ji&#34;&gt;&lt;img src=&#34;https://github.com/Jack-Ji.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/Jack-Ji&#34;&gt;jack&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/blanchonvincent&#34;&gt;&lt;img src=&#34;https://github.com/blanchonvincent.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/blanchonvincent&#34;&gt;Blanchon Vincent&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/auderer&#34;&gt;&lt;img src=&#34;https://github.com/auderer.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/auderer&#34;&gt;Michael Auderer&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/raa0121&#34;&gt;&lt;img src=&#34;https://github.com/raa0121.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/raa0121&#34;&gt;raa0121&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/conifer-dev&#34;&gt;&lt;img src=&#34;https://github.com/conifer-dev.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/conifer-dev&#34;&gt;Conifer&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/griffithsh&#34;&gt;&lt;img src=&#34;https://github.com/griffithsh.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/griffithsh&#34;&gt;Huw Griffiths&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-4&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/head77x&#34;&gt;Brandon Chung&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/zucenko&#34;&gt;zucenko&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/mortenson&#34;&gt;Samuel Mortenson&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/rubiojr&#34;&gt;Sergio Rubio&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/jithinraj&#34;&gt;Jithin Raj&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/bykovme&#34;&gt;Alex Bykov&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/zJeremiah&#34;&gt;Jeremiah&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/dictav&#34;&gt;Shintaro Abe&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;span lang=&#34;en&#34;&gt;And some private sponsors&lt;/span&gt;&lt;span lang=&#34;ja&#34;&gt;その他、何名かのプライベートスポンサー&lt;/span&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 lang=&#34;en&#34;&gt;Contributors&lt;/h2&gt;&#xA;&lt;h2 lang=&#34;ja&#34;&gt;コントリビューター&lt;/h2&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;These people contributed to Ebiten in between December 2019 and November 2020. I appreciate all the contributions!&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;2019 年 12 月から 2020 年 11 月の間、以下の方々にコントリビュートしていただきました。心より感謝いたします。&lt;/p&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;(In the order of total commits)&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;(コミット数順、敬称略)&lt;/p&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/tomlister&#34;&gt;&lt;img src=&#34;https://github.com/tomlister.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/tomlister&#34;&gt;Tom Lister&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/hiroebe&#34;&gt;&lt;img src=&#34;https://github.com/hiroebe.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/hiroebe&#34;&gt;hiroebe&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/corfe83&#34;&gt;&lt;img src=&#34;https://github.com/corfe83.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/corfe83&#34;&gt;corfe83&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/zacharyburkett&#34;&gt;&lt;img src=&#34;https://github.com/zacharyburkett.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/zacharyburkett&#34;&gt;Zachary Burkett&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/gabstv&#34;&gt;&lt;img src=&#34;https://github.com/gabstv.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/gabstv&#34;&gt;Gabriel Ochsenhofer&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/loig&#34;&gt;&lt;img src=&#34;https://github.com/loig.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/loig&#34;&gt;loig&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-1&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img avatar&#34;&gt;&lt;a href=&#34;https://github.com/nanoslayer&#34;&gt;&lt;img src=&#34;https://github.com/nanoslayer.png?size=192&#34; width=&#34;192&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://github.com/nanoslayer&#34;&gt;nanoslayer&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-4&#34;&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;and many more contributors have contributed to Ebiten.&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;その他多数のコントリビューターからコントリビュートしていただきました。&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 lang=&#34;en&#34;&gt;Events&lt;/h2&gt;&#xA;&lt;h2 lang=&#34;ja&#34;&gt;出来事&lt;/h2&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;Summary&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;まとめ&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;The most significant change in Ebiten is introducing &lt;a href=&#34;/documents/shader.html&#34;&gt;a Go-flavored shading language&lt;/a&gt;. I hope this would be used more in actual applications.&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;Ebiten 自体の一番大きい変化は、 &lt;a href=&#34;/documents/shader.html&#34;&gt;Go 風味シェーディング言語&lt;/a&gt;の導入です。今後もっと実アプリケーションで使われるように慣ればと思います。&lt;/li&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;The second most significant change in Ebiten is updating the major version to v2. This was the first trial, but apparently worked well. v3 will be released in about 5 years.&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;次に大きい変化は、メジャーバージョンが v2 にアップデートされたことです。初の試みでしたが、うまく行ったように思われます。 v3 が出るのはおおよそ 5 年後くらいでしょう。&lt;/li&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;I have been working on supporting consoles. An actual output will be shown in 2021.&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;家庭用ゲーム機の対応を行っていました。実際に成果物が出るのは 2021 年でしょう。&lt;/li&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;Compared with &lt;a href=&#34;/blog/2019.html&#34;&gt;the last year&lt;/a&gt;, the number of applications with Ebiten has been increased. I am very grateful with that. I picked up some of them in this article.&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;&lt;a href=&#34;/blog/2019.html&#34;&gt;去年&lt;/a&gt;と比べて、 Ebiten を使ったアプリケーションが徐々に増えてきました。大変ありがたいことです。この記事でもいくつかピックアップして紹介しています。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;December, 2019&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;2019 年 12 月&lt;/h3&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;&lt;a href=&#34;https://gdg.community.dev/gdg-shikoku/&#34;&gt;Google Developer Group Shikoku&lt;/a&gt; held a workshop about Ebiten &#34;&lt;a href=&#34;https://gdg.community.dev/events/details/google-gdg-shikoku-presents-xiang-chuan-goyan-yu-waiwaihui-gemuzuo-rou-1/&#34;&gt;香川 Go 言語 わいわい会 (GAME を作ろう)&lt;/a&gt;&#34; in Kagawa, Japan.&lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;&lt;a href=&#34;https://gdg.community.dev/gdg-shikoku/&#34;&gt;Google Developer Group Shikoku&lt;/a&gt; 主催で、「&lt;a href=&#34;https://gdg.community.dev/events/details/google-gdg-shikoku-presents-xiang-chuan-goyan-yu-waiwaihui-gemuzuo-rou-1/&#34;&gt;香川 Go 言語 わいわい会 (GAME を作ろう)&lt;/a&gt;」という Ebiten の勉強会が香川県で開かれました。&lt;/li&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;&lt;a href=&#34;https://twitter.com/SilbinaryWolf&#34;&gt;Jae Bentvelzen (SilbinaryWolf)&lt;/a&gt; released &lt;a href=&#34;https://store.steampowered.com/app/1163470/Give_Up_The_Dupe/&#34;&gt;Give Up The Dupe&lt;/a&gt;&#34;. This is the very first Steam game with Ebiten, as far as I know.&lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;「&lt;a href=&#34;https://store.steampowered.com/app/1163470/Give_Up_The_Dupe/&#34;&gt;Give Up The Dupe&lt;/a&gt;」が &lt;a href=&#34;https://twitter.com/SilbinaryWolf&#34;&gt;Jae Bentvelzen (SilbinaryWolf)&lt;/a&gt; 氏によってリリースされました。これは自分の知る限り、一番最初の Ebiten 製 Steam ゲームです。&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/2020/giveupthedupe.png&#34; width=&#34;456&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://store.steampowered.com/app/1163470/Give_Up_The_Dupe/&#34;&gt;Give up the Dupe, SilbinaryWolf, 2019&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;January&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;1 月&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;&lt;a href=&#34;https://github.com/golang/go/issues/27234#issuecomment-577481562&#34;&gt;I&#39;ve finished supporting Go modules for Gomobile&lt;/a&gt;. Gomobile is a very essential product for Ebiten, and supporting Go modules is necessary for Ebiten v2.&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;&lt;a href=&#34;https://github.com/golang/go/issues/27234#issuecomment-577481562&#34;&gt;Gomobile の Go modules 対応が完了しました&lt;/a&gt;。 Gomobile は Ebiten にとって極めて重要なプロダクトであり、 Go modules の対応は Ebiten v2 のために必要でした。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;February&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;2 月&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;I was doing an experiment to run the Go toolchains as WebAssembly. The output is in the project &lt;a href=&#34;https://github.com/hajimehoshi/asobiba&#34;&gt;Asobiba&lt;/a&gt;.&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;Go ツールチェーンを WebAssembly として動かす実験を行っていました。成果物は &lt;a href=&#34;https://github.com/hajimehoshi/asobiba&#34;&gt;Asobiba&lt;/a&gt; リポジトリにあります。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;March&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;3 月&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;Started to develop &lt;a href=&#34;https://github.com/hajimehoshi/go2dotnet&#34;&gt;go2dotnet&lt;/a&gt;. This is a tool to convert from Go to C# so that an Ebiten game work on &lt;a href=&#34;https://www.monogame.net/&#34;&gt;MonoGame&lt;/a&gt;. With this, I planned to make Ebiten games work on consoles. Actually &lt;a href=&#34;https://twitter.com/hajimehoshi/status/1252614478010540034&#34;&gt;I&#39;ve succeeded to make an Ebiten game work on MonoGame&lt;/a&gt;, but the output C# was too big to convert into C++ for consoles, then &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/1148&#34;&gt;I abandoned this project&lt;/a&gt;. Instead, I started to develop &lt;a href=&#34;https://github.com/hajimehoshi/go2cpp&#34;&gt;go2cpp&lt;/a&gt; based on my experience of go2dotnet later.&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;&lt;a href=&#34;https://github.com/hajimehoshi/go2dotnet&#34;&gt;go2dotnet&lt;/a&gt; の開発を開始。これは、 Go を C# に変換するツールで、 Ebiten のゲームを &lt;a href=&#34;https://www.monogame.net/&#34;&gt;MonoGame&lt;/a&gt; で動かすことができ、家庭用ゲーム機で動かすことを目論んだものでした。実際 &lt;a href=&#34;https://twitter.com/hajimehoshi/status/1252614478010540034&#34;&gt;Ebiten のゲームを MonoGame 上で動かすことは出来た&lt;/a&gt;のですが、生成される C# が巨大すぎて家庭用ゲーム機への C++ 変換がうまくいかなかったので&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/1148&#34;&gt;断念&lt;/a&gt;しました。その代わり、 go2dotnet は後に開発する &lt;a href=&#34;https://github.com/hajimehoshi/go2cpp&#34;&gt;go2cpp&lt;/a&gt; の礎となりました。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;April&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;4 月&lt;/h3&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;Released &lt;a href=&#34;/documents/1.11.html&#34;&gt;Ebiten 1.11&lt;/a&gt;. The main feature is &lt;code&gt;Game&lt;/code&gt; interface and &lt;code&gt;RunGame&lt;/code&gt; function. In addition, you can develop a desktop mascot application.&lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;&lt;a href=&#34;/documents/1.11.html&#34;&gt;Ebiten 1.11&lt;/a&gt; をリリース。主な機能は &lt;code&gt;Game&lt;/code&gt; インターフェイスと &lt;code&gt;RunGame&lt;/code&gt; 関数です。また、デスクトップマスコットが作れるようになりました。&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;video controls autoplay src=&#34;/images/documents/1.11/mascot.mp4&#34; width=&#34;456&#34;&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;May&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;5 月&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;Started to develop &lt;a href=&#34;https://github.com/hajimehoshi/go2cpp&#34;&gt;go2cpp&lt;/a&gt;. This tool converts Go to C++. The purpose is to make Ebiten games works on consoles.&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;&lt;a href=&#34;https://github.com/hajimehoshi/go2cpp&#34;&gt;go2cpp&lt;/a&gt; の開発を開始。このツールは Go を C++ に変換します。目的は Ebiten のゲームを家庭用ゲーム機で動かすことです。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;June&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;6 月&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;Introduced &lt;a href=&#34;/blog/subimage.html&#34;&gt;a breaking change&lt;/a&gt; to make Ebiten faster.&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;Ebiten の高速化のために、&lt;a href=&#34;/blog/subimage.html&#34;&gt;破壊的変更&lt;/a&gt;を導入しました。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;July&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;7 月&lt;/h3&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;&lt;a href=&#34;https://snowman.odencat.com&#34;&gt;Snowman Story&lt;/a&gt;, which is made with Ebiten by &lt;a href=&#34;https://odencat.com&#34;&gt;Odencat&lt;/a&gt;, received Top10 award at &lt;a href=&#34;https://developers-jp.googleblog.com/2020/07/google-play-indie-games-festival-2020-winners.html&#34;&gt;Google Play Indie Games Festival 2020&lt;/a&gt;. Congratulations!&#xA;        &lt;ul&gt;&#xA;          &lt;li&gt;Odencat is a game company established by &lt;a href=&#34;https://twitter.com/daigo&#34;&gt;Daigo&lt;/a&gt; and has released several mobile games in Ebiten.&lt;/li&gt;&#xA;        &lt;/ul&gt;&#xA;      &lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;&lt;a href=&#34;https://odencat.com&#34;&gt;Odencat&lt;/a&gt; の Ebiten 製ゲーム「&lt;a href=&#34;https://snowman.odencat.com&#34;&gt;スノーマンストーリー&lt;/a&gt;」が、&lt;a href=&#34;https://developers-jp.googleblog.com/2020/07/google-play-indie-games-festival-2020-winners.html&#34;&gt;Google Play Indie Games Festival 2020&lt;/a&gt; にてトップ 10 を受賞しました。おめでとうございます!&#xA;        &lt;ul&gt;&#xA;          &lt;li&gt;Odencat は &lt;a href=&#34;https://twitter.com/daigo&#34;&gt;Daigo&lt;/a&gt; によって設立されたゲーム会社で、 Ebiten 製モバイルゲームをいくつかリリースしています。&lt;/li&gt;&#xA;        &lt;/ul&gt;&#xA;      &lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/2020/snowman.png&#34; width=&#34;456&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://snowman.odencat.com&#34;&gt;Snowman Story, Odencat Inc., 2020&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;「スノーマン・ストーリー」TOP10に選んでいただけたようです。ありがとうございます🥲&lt;br&gt;他の受賞者と特別賞の方もおめでとうございます！！&lt;a href=&#34;https://twitter.com/hashtag/IndieGamesFestival?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#IndieGamesFestival&lt;/a&gt; &lt;a href=&#34;https://t.co/mNfP3M27xW&#34;&gt;https://t.co/mNfP3M27xW&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ryota (@ryo4071) &lt;a href=&#34;https://twitter.com/ryo4071/status/1286553153270214656?ref_src=twsrc%5Etfw&#34;&gt;July 24, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;August&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;8 月&lt;/h3&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;Several interesting games with Ebiten were released in this month.&#xA;        &lt;ul&gt;&#xA;          &lt;li&gt;&lt;a href=&#34;https://nadim.computer/&#34;&gt;Nadim Kobeissi&lt;/a&gt; released &lt;a href=&#34;https://piccolo.click/&#34;&gt;Piccolo&lt;/a&gt;. This is an Othello game with a beautiful user interface, and has &lt;a href=&#34;https://piccolo.click/web/&#34;&gt;the WebAssembly version&lt;/a&gt;. This AI is astonishingly strong for me and I could not beat the default level.&lt;/li&gt;&#xA;          &lt;li&gt;&lt;a href=&#34;https://github.com/corfe83&#34;&gt;corfe83&lt;/a&gt; released &lt;a href=&#34;https://www.reddit.com/r/IdleArmada/&#34;&gt;Idle Armada&lt;/a&gt;. Probably this is the very first paid Android application with Ebiten.&lt;/li&gt;&#xA;        &lt;/ul&gt;&#xA;      &lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;いくつか興味深いゲームがリリースされました。&#xA;        &lt;ul&gt;&#xA;          &lt;li&gt;&lt;a href=&#34;https://nadim.computer/&#34;&gt;Nadim Kobeissi&lt;/a&gt; 氏の &lt;a href=&#34;https://piccolo.click/&#34;&gt;Piccolo&lt;/a&gt; がリリースされました。美しい UI を持つオセロゲームで、 &lt;a href=&#34;https://piccolo.click/web/&#34;&gt;WebAssembly 版&lt;/a&gt;があります。 AI がめちゃくちゃ強くて、自分の場合デフォルトのレベルでは一度も勝てませんでした。&lt;/li&gt;&#xA;          &lt;li&gt;&lt;a href=&#34;https://github.com/corfe83&#34;&gt;corfe83&lt;/a&gt; 氏の &lt;a href=&#34;https://www.reddit.com/r/IdleArmada/&#34;&gt;Idle Armada&lt;/a&gt; がリリースされました。これはおそらく Ebiten 史上初の有料 Android アプリケーションです。&lt;/li&gt;&#xA;        &lt;/ul&gt;&#xA;      &lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/2020/idlearmada.png&#34; width=&#34;456&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.musicalbox.idle.armada&#34;&gt;Idle Armada, corfe83, 2020&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/2020/piccolo.png&#34; width=&#34;456&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://piccolo.click/web&#34;&gt;Piccolo, Nadim Kobeissi, 2020&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;September&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;9 月&lt;/h3&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;Odencat released &lt;a href=&#34;https://mousebusters.odencat.com&#34;&gt;Mousebusters&lt;/a&gt;.&lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;Odencat の &lt;a href=&#34;https://mousebusters.odencat.com&#34;&gt;ねずみバスターズ&lt;/a&gt; がリリースされました。&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/2020/mousebusters.png&#34; width=&#34;456&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://mousebusters.odencat.com&#34;&gt;Mousebusters, Odencat Inc., 2020&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/2020/mousebusters2.png&#34; width=&#34;456&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://mousebusters.odencat.com&#34;&gt;Mousebusters, Odencat Inc., 2020&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;October&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;10 月&lt;/h3&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;Released &lt;a href=&#34;/documents/1.12.html&#34;&gt;Ebiten 1.12&lt;/a&gt; with &lt;a href=&#34;/documents/shader.html&#34;&gt;a Go-flavored shading language&lt;/a&gt;.&lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;&lt;a href=&#34;/documents/1.12.html&#34;&gt;Ebiten 1.12&lt;/a&gt; をリリース。&lt;a href=&#34;/documents/shader.html&#34;&gt;Go 風味のシェーダ言語&lt;/a&gt;が利用できるようになりました。&lt;/li&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;Released &lt;a href=&#34;/documents/2.0.html&#34;&gt;Ebiten 2.0&lt;/a&gt;. This is the first major version update. &lt;a href=&#34;/documents/to_v2.html&#34;&gt;The APIs are cleaned up&lt;/a&gt;.&lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;&lt;a href=&#34;/documents/2.0.html&#34;&gt;Ebiten 2.0&lt;/a&gt; をリリース。初めてのメジャーバージョンアップデートです。 &lt;a href=&#34;/documents/to_v2.html&#34;&gt;API が整理されました&lt;/a&gt;。&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;video controls autoplay src=&#34;/images/documents/shader/lighting.mp4&#34; width=&#34;456&#34;&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;// Uniform variables.&#xA;var Time float&#xA;var Cursor vec2&#xA;var ScreenSize vec2&#xA;&#xA;// Fragment is the entry point of the fragment shader.&#xA;// Fragment returns the color value for the current position.&#xA;func Fragment(position vec4, texCoord vec2, color vec4) vec4 {&#xA;&#x9;// You can define variables with a short variable declaration like Go.&#xA;&#x9;lightpos := vec3(Cursor, 50)&#xA;&#x9;lightdir := normalize(lightpos - position.xyz)&#xA;&#x9;normal := normalize(imageSrc1UnsafeAt(texCoord) - 0.5)&#xA;&#x9;ambient := 0.25&#xA;&#x9;diffuse := 0.75 * max(0.0, dot(normal.xyz, lightdir))&#xA;&#xA;&#x9;// You can treat multiple source images by&#xA;&#x9;// imageSrc[N]At or imageSrc[N]UnsafeAt.&#xA;&#x9;return imageSrc0UnsafeAt(texCoord) * (ambient + diffuse)&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;&lt;a href=&#34;https://github.com/tommyblue&#34;&gt;Tommaso Visconti&lt;/a&gt; held a workshop session &#34;&lt;a href=&#34;https://golab.io/agenda/session/342994&#34;&gt;Game development with Go&lt;/a&gt;&#34; at &lt;a href=&#34;https://golab.io&#34;&gt;GoLab 2020&lt;/a&gt;.&lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;&lt;a href=&#34;https://golab.io&#34;&gt;GoLab 2020&lt;/a&gt; にて、 &lt;a href=&#34;https://github.com/tommyblue&#34;&gt;Tommaso Visconti&lt;/a&gt; 氏のワークショップ「&lt;a href=&#34;https://golab.io/agenda/session/342994&#34;&gt;Game development with Go&lt;/a&gt;」が行われました。&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;iframe width=&#34;456&#34; height=&#34;257&#34; src=&#34;https://www.youtube.com/embed/6r6ZH4cA41M&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;  &#xA;&lt;/ul&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;November&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;11 月&lt;/h3&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;At a game jam &lt;a href=&#34;https://itch.io/jam/game-off-2020&#34;&gt;Game Off 2020&lt;/a&gt; hosted by GitHub, some games with Ebiten were released&#xA;        &lt;ul&gt;&#xA;          &lt;li&gt;&lt;a href=&#34;https://loig.itch.io/moonshot&#34;&gt;Moonshot&lt;/a&gt; by &lt;a href=&#34;https://loig.itch.io&#34;&gt;loig&lt;/a&gt;&lt;/li&gt;&#xA;          &lt;li&gt;&lt;a href=&#34;https://sinisterstuf.itch.io/lunar-defence&#34;&gt;Lunar Defence&lt;/a&gt; by &lt;a href=&#34;https://sinisterstuf.itch.io&#34;&gt;sinisterstuf&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;/ul&gt;&#xA;      &lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;GitHub 主催のゲームジャム &lt;a href=&#34;https://itch.io/jam/game-off-2020&#34;&gt;Game Off 2020&lt;/a&gt; にて、いくつか Ebiten 製ゲームが公開されました。&#xA;        &lt;ul&gt;&#xA;          &lt;li&gt;&lt;a href=&#34;https://loig.itch.io/moonshot&#34;&gt;Moonshot&lt;/a&gt; by &lt;a href=&#34;https://loig.itch.io&#34;&gt;loig&lt;/a&gt;&lt;/li&gt;&#xA;          &lt;li&gt;&lt;a href=&#34;https://sinisterstuf.itch.io/lunar-defence&#34;&gt;Lunar Defence&lt;/a&gt; by &lt;a href=&#34;https://sinisterstuf.itch.io&#34;&gt;sinisterstuf&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;/ul&gt;&#xA;      &lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/2020/moonshot.png&#34; width=&#34;456&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://loig.itch.io/moonshot&#34;&gt;Moonshot, Loig, 2020&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/2020/lunardefence.png&#34; width=&#34;456&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://sinisterstuf.itch.io/lunar-defence&#34;&gt;Lunar Defence, sinisterstuf, 2020&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h3 lang=&#34;en&#34;&gt;December&lt;/h3&gt;&#xA;&lt;h3 lang=&#34;ja&#34;&gt;12 月&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;I&#39;m now working on supporting consoles, especially Nintendo Switch. Stay tuned!&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;現在、家庭用ゲーム機、特に Nintendo Switch のサポートに向けて作業中です。お楽しみに!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 lang=&#34;en&#34;&gt;Ebiten in 2021 and after&lt;/h2&gt;&#xA;&lt;h2 lang=&#34;ja&#34;&gt;2021 年以降の Ebiten&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;The highest priority task is supporting consoles, especially Nintendo Switch (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/744&#34;&gt;Issue 744&lt;/a&gt;). I believe this can be done with &lt;a href=&#34;https://github.com/hajimehoshi/go2cpp&#34;&gt;go2cpp&lt;/a&gt;. Due to NDA, I cannot make the work open, but I&#39;d like to release an Ebiten game for Nintendo Switch some day.&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;最もプライオリティの高いタスクは家庭用ゲーム機、特に Nintendo Switch のサポートです (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/744&#34;&gt;Issue 744&lt;/a&gt;)。 &lt;a href=&#34;https://github.com/hajimehoshi/go2cpp&#34;&gt;go2cpp&lt;/a&gt; を使って実現可能であると信じています。 NDA の問題があり、成果物は公開できないのですが、いつか Nintendo Switch 向けの Ebiten ゲームをリリースしたいと考えています。&lt;/li&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;The other thing I am interested in is supporting UI (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/1029&#34;&gt;Issue 1029&lt;/a&gt;). I think that supporting a native text input would be useful.&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;その他興味があるのは UI のサポートです。ネイティブでテキスト入力ができるようになると便利であると考えています (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/1029&#34;&gt;Issue 1029&lt;/a&gt;)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</content>
  </entry>
  <entry>
    <title>v2.0.0 is released</title>
    <id>https://ebiten.org/blog/v2.0.0.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/v2.0.0.html"></link>
    <published>2020-10-28T00:00:00+09:00</published>
    <updated>2020-10-28T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1 lang=&#34;en&#34;&gt;v2.0.0 is released&lt;/h1&gt;&#xA;&lt;h1 lang=&#34;ja&#34;&gt;v2.0.0 がリリースされました&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2020-10-28&lt;/span&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;We are very happy to announce the release of v2.0.0 (&lt;a href=&#34;/documents/2.0.html&#34;&gt;Release Note&lt;/a&gt;).&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;v2.0.0 がリリースされました! 詳しくは&lt;a href=&#34;/documents/2.0.html&#34;&gt;リリースノート&lt;/a&gt;を参照してください。&lt;/p&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;I appreciate all the contributors and &lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;all the sponsors&lt;/a&gt;. Thank you very much!&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;すべてのコントリビューターと&lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;スポンサーの皆様&lt;/a&gt;に感謝いたします。どうもありがとうございます!&lt;/p&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;v2.0 doesn&#39;t have any new features. The features are same as v1.12. As there are breaking changes in the API, please refer &lt;a href=&#34;/documents/to_v2.html&#34;&gt;Ebiten 2.0 migration guide&lt;/a&gt; for the details.&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;v2.0 には新機能が一切ありません。機能的には v1.12 と同等です。 API の破壊的変更がありますので、詳しくは「&lt;a href=&#34;/documents/to_v2.html&#34;&gt;Ebiten 2.0 移行ガイド&lt;/a&gt;」を参照してください。&lt;/p&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;The master branch has already been v2.1. Only bug fixes will be merged to v2.0 and v1.12. We plan to release v2.1.0 in March 2021. After releasing v2.1.0, v1.12 will no longer be maintained.&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;master ブランチはすでに v2.1 となっています。 v2.0 と v1.12 は今後バグ修正のみが入ります。 v2.1.0 のリリースは 2021 年 3 月頃の予定です。 v2.1.0 のリリース後、 v1.12 はメンテされなくなる予定です。&lt;/p&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;Enjoy!&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img id=&#34;meta-share&#34; src=&#34;/images/blog/v2.0.0/v2.png&#34; width=&#34;456&#34;&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;</content>
  </entry>
  <entry>
    <title>Ebiten v2 is coming</title>
    <id>https://ebiten.org/blog/v2_is_coming.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/v2_is_coming.html"></link>
    <published>2020-10-10T00:00:00+09:00</published>
    <updated>2020-10-10T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1 lang=&#34;en&#34;&gt;Ebiten v2 is coming&lt;/h1&gt;&#xA;&lt;h1 lang=&#34;ja&#34;&gt;Ebiten v2 がやってくる&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2020-10-10&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;As we described in the &lt;a href=&#34;/blog/roadmap2020.html&#34;&gt;roadmap&lt;/a&gt;, we will release Ebiten v2 this month. v2 includes incompatible changes with v2 in the API, but the others are almost same as v1. For migration from v1 to v2, please see &lt;a href=&#34;/documents/to_v2.html&#34;&gt;Ebiten v2 migration guide&lt;/a&gt;. Basically we plan to add these quiet changes.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;&lt;a href=&#34;/blog/roadmap2020.html&#34;&gt;ロードマップ&lt;/a&gt;での目論見通り、今月中に v2 がリリースされます。 v2 は v1 の API とは互換性のない変更を含みますが、その他はほぼすべて同じです。v1 から v2 への移行については、 &lt;a href=&#34;/documents/to_v2.html&#34;&gt;Ebiten v2 移行ガイド&lt;/a&gt;を参照してください。基本的に次のような、おとなしめの変更がはいります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;Removing already-deprecated features (e.g., &lt;code&gt;Run&lt;/code&gt;)&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;すでに廃止予定の機能を削除 (例: &lt;code&gt;Run&lt;/code&gt;)&lt;/li&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;Removing &#39;error&#39; returning values from some functions (e.g., &lt;code&gt;DrawImage&lt;/code&gt;)&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;いくつかの関数から、戻り値のエラーを削除 (例: &lt;code&gt;DrawImage&lt;/code&gt;)&lt;/li&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;Adding new types to replace integers (e.g., &lt;code&gt;GamepadIDs&lt;/code&gt;s will return &lt;code&gt;[]GamepadID&lt;/code&gt; instead of &lt;code&gt;[]int&lt;/code&gt;)&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;整数型に代わる新しい型を追加 (例: &lt;code&gt;GamepadIDs&lt;/code&gt; が &lt;code&gt;[]int&lt;/code&gt; の代わりに &lt;code&gt;[]GamepadID&lt;/code&gt; を返すようになる)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;Ebiten v2.0.0-rc.1 has already been released, and you can try that now.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;Ebiten v2.0.0-rc.1 はすでにリリース済みで、すぐに試すことができます。&lt;/p&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;Ebiten v2.0.0 will come at earliest in a week. Stay tuned!&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;Ebiten v2.0.0 は早くて一週間後リリース予定です。お楽しみに!&lt;/p&gt;&#xA;</content>
  </entry>
  <entry>
    <title>v1.12.0 is released</title>
    <id>https://ebiten.org/blog/v1.12.0.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/v1.12.0.html"></link>
    <published>2020-10-01T00:00:00+09:00</published>
    <updated>2020-10-01T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1 lang=&#34;en&#34;&gt;v1.12.0 is released&lt;/h1&gt;&#xA;&lt;h1 lang=&#34;ja&#34;&gt;v1.12.0 がリリースされました&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2020-10-01&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;We are very happy to announce the release of v1.12.0 (&lt;a href=&#34;/documents/1.12.html&#34;&gt;Release Note&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;v1.12.0 がリリースされました! 詳しくは&lt;a href=&#34;/documents/1.12.html&#34;&gt;リリースノート&lt;/a&gt;を参照してください。&lt;/p&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;I appreciate all the contributors and &lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;all the sponsors&lt;/a&gt;. Thank you very much!&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;すべてのコントリビューターと&lt;a href=&#34;https://github.com/sponsors/hajimehoshi&#34;&gt;スポンサーの皆様&lt;/a&gt;に感謝いたします。どうもありがとうございます!&lt;/p&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;The main new feature is &lt;a href=&#34;/documents/shader.html&#34;&gt;a custom shader with a new shading languge Kage&lt;/a&gt;. You can write a fragment shader in a Go-flavored language.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;主な新しい機能は、 &lt;a href=&#34;/documents/shader.html&#34;&gt;カスタムシェーダとシェーディング言語 Kage&lt;/a&gt; です。 Go 風味の言語でフラグメントシェーダを書くことができます。&lt;/p&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;// Uniform variables.&#xA;var Time float&#xA;var Cursor vec2&#xA;var ScreenSize vec2&#xA;&#xA;// Fragment is the entry point of the fragment shader.&#xA;// Fragment returns the color value for the current position.&#xA;func Fragment(position vec4, texCoord vec2, color vec4) vec4 {&#xA;&#x9;// You can define variables with a short variable declaration like Go.&#xA;&#x9;lightpos := vec3(Cursor, 50)&#xA;&#x9;lightdir := normalize(lightpos - position.xyz)&#xA;&#x9;normal := normalize(imageSrc1UnsafeAt(texCoord) - 0.5)&#xA;&#x9;ambient := 0.25&#xA;&#x9;diffuse := 0.75 * max(0.0, dot(normal.xyz, lightdir))&#xA;&#xA;&#x9;// You can treat multiple source images by&#xA;&#x9;// imageSrc[N]At or imageSrc[N]UnsafeAt.&#xA;&#x9;return imageSrc0UnsafeAt(texCoord) * (ambient + diffuse)&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;video controls autoplay src=&#34;/images/documents/shader/lighting.mp4&#34; width=&#34;456&#34;&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;Enjoy!&lt;/p&gt;&#xA;</content>
  </entry>
  <entry>
    <title>Roadmap in 2020 and later</title>
    <id>https://ebiten.org/blog/roadmap2020.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/roadmap2020.html"></link>
    <published>2020-07-25T00:00:00+09:00</published>
    <updated>2020-07-25T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1 lang=&#34;en&#34;&gt;Roadmap in 2020 and later&lt;/h1&gt;&#xA;&lt;h1 lang=&#34;ja&#34;&gt;2020 年以降のロードマップ&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2020-07-25&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;This is the roadmap of Ebiten in 2020 and later. As this is just a plan, we might change this anytime.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;2020 年以降の Ebiten のロードマップです。あくまで予定なので、いつでも変更する可能性があります。&lt;/p&gt;&#xA;&lt;h2 lang=&#34;en&#34;&gt;Ebiten 1.12 - September, 2020&lt;/h2&gt;&#xA;&lt;h2 lang=&#34;ja&#34;&gt;Ebiten 1.12 - 2020 年 9 月&lt;/h2&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;The most significant new feature is a shader. This enables users to write custom shaders. To make shaders portable, we are developing a new Go-flavored shader language: Kage (影 - a shade in Japanese).&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;最も重要な新機能はシェーダーです。ユーザーはカスタムシェーダーを書けるようになります。シェーダーをポータブルにするために、新しい Go 風味のシェーダー言語、 Kage (影) を開発しています。&lt;/p&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;This is an example of a fragment shader in Kage:&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;Kage によるフラグメントシェーダーの例は次のようなものです:&lt;/p&gt;&#xA;    &lt;pre data-codesrc=&#34;/go/blog/roadmap2020/example.go&#34;&gt;&lt;/pre&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;This is compatible with Go syntax, and you can do go-fmt!&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;Go の文法と互換性があり、 go-fmt することもできます!&lt;/p&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;Now we are implementing more bulitin functions and necessary syntax items. Stay tuned.&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;今は、組み込み関数を増やしたり、必要な文法要素を追加しているところです。お楽しみに!&lt;/p&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;Ebiten is released about one month after a new Go compiler is released. As Go compiler is regularly released in February and August every year, we release Ebiten in March and September every year, hopefully.&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;Ebiten は Go コンパイラがリリースされてからおおよそ一ヶ月後にリリースされます。 Go コンパイラが定期的に毎年 2 月と 8 月にリリースされるので、 Ebiten は毎年 3 月と 9 月にリリースされる見込みです。&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/ebiten?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ebiten&lt;/a&gt; shader current progress: lighting! &lt;a href=&#34;https://twitter.com/hashtag/golang?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#golang&lt;/a&gt; &lt;a href=&#34;https://t.co/6hXEgmFcaI&#34;&gt;https://t.co/6hXEgmFcaI&lt;/a&gt; &lt;a href=&#34;https://t.co/NV8gJ9ge8S&#34;&gt;pic.twitter.com/NV8gJ9ge8S&lt;/a&gt;&lt;/p&gt;&amp;mdash; Hajime Hoshi (星一) (@hajimehoshi) &lt;a href=&#34;https://twitter.com/hajimehoshi/status/1284741206744788992?ref_src=twsrc%5Etfw&#34;&gt;July 19, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 lang=&#34;en&#34;&gt;Ebiten 2.0 - November, 2020&lt;/h2&gt;&#xA;&lt;h2 lang=&#34;ja&#34;&gt;Ebiten 2.0 - 2020 年 10 月&lt;/h2&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;This will be the first update of the major version. We don&#39;t add drastic changes. Instead, we plan to add quiet changes to reduce the pain for Ebiten users to migrate as much as possible.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;最初のメジャーバージョンアップデートになります。過激な変更を入れるのではなく、代わりにおとなしめの変更を入れる予定です。 Ebiten ユーザーが移行する際の痛みを最小限に抑えるためです。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;Removing already-deprecated features (e.g., &lt;code&gt;Run&lt;/code&gt;)&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;すでに廃止予定の機能を削除 (例: &lt;code&gt;Run&lt;/code&gt;)&lt;/li&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;Removing &#39;error&#39; returning values from some functions (e.g., &lt;code&gt;DrawImage&lt;/code&gt;)&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;いくつかの関数から、戻り値のエラーを削除 (例: &lt;code&gt;DrawImage&lt;/code&gt;)&lt;/li&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;Adding new types to replace integers (e.g., &lt;code&gt;GamepadIDs&lt;/code&gt; will return &lt;code&gt;[]GamepadID&lt;/code&gt; instead of &lt;code&gt;[]int&lt;/code&gt;)&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;整数型に代わる新しい型を追加 (例: &lt;code&gt;GamepadIDs&lt;/code&gt; が &lt;code&gt;[]int&lt;/code&gt; の代わりに &lt;code&gt;[]GamepadID&lt;/code&gt; を返すようになる)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 lang=&#34;en&#34;&gt;Ebiten 2.1 - March, 2021&lt;/h2&gt;&#xA;&lt;h2 lang=&#34;ja&#34;&gt;Ebiten 2.1 - 2021 年 3 月&lt;/h2&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;We want to support Nintendo Switch. We have developed &lt;a href=&#34;https://github.com/hajimehoshi/go2cpp&#34;&gt;go2cpp&lt;/a&gt;, a converter from Go to C++, and we plan to use this.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;Nintendo Switch をサポートしたいですね。 &lt;a href=&#34;https://github.com/hajimehoshi/go2cpp&#34;&gt;go2cpp&lt;/a&gt; という Go から C++ へのコンバーターを開発したので、これを使う予定です。&lt;/p&gt;&#xA;&lt;h2 lang=&#34;en&#34;&gt;Ebiten 2.2 - Steptember, 2021&lt;/h2&gt;&#xA;&lt;h2 lang=&#34;ja&#34;&gt;Ebiten 2.2 - 2021 年 9 月&lt;/h2&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;No plan yet. We might support vector graphics or DirectX.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;予定なし。ベクターグラフィックスや DirectX をサポートするかもしれません。&lt;/p&gt;&#xA;</content>
  </entry>
  <entry>
    <title>Breaking change to 1.12: rendering sub-images</title>
    <id>https://ebiten.org/blog/subimage.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/subimage.html"></link>
    <published>2020-06-28T00:00:00+09:00</published>
    <updated>2020-06-28T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1 lang=&#34;en&#34;&gt;Breaking change to 1.12: rendering sub-images&lt;/h1&gt;&#xA;&lt;h1 lang=&#34;ja&#34;&gt;1.12 に入る破壊的変更: サブ画像の描画&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2020-06-28&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;This artcile includes the information in June 2020. There&#39;s a possibility the plan will change.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;この記事は 2020 年 6 月現在の情報であり、予定を変更する可能性もあります。&lt;/p&gt;&#xA;&lt;h2 lang=&#34;en&#34;&gt;TL;DR&lt;/h2&gt;&#xA;&lt;h2 lang=&#34;ja&#34;&gt;要約&lt;/h2&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;Ebiten is adding a breaking change to 1.12 (the current master branch). Ebiten will no longer check the source-image region when rendering an image, and unexpected pixels might be rendered in some cases. This rendering result&#39;s difference might be seen when all the following conditions are satisfied:&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;Ebiten は 1.12 (現在の master ブランチ) から破壊的を導入する予定です。 Ebiten は、画像の描画の際、描画元領域のチェックをしないようになり、そのためいくつかのケースでは予期しないピクセルが描画されることがあります。この描画結果の違いは、以下の条件のすべてが満たされた場合に発生しえます:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;A sub-image (an image created by &lt;code&gt;SubImage&lt;/code&gt; function) is used&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;サブ画像 (&lt;code&gt;SubImage&lt;/code&gt; 関数で作られた画像) が使われる&lt;/li&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;The image is rendered with scaling or rotating&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;画像が拡大縮小または回転されて描画される&lt;/li&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;The adjacent areas&#39;s graphics are not continuous&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;隣接する領域の画像が連続していない&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;For example, rendering tiles on texture atlas with scaling or rotating might cause a different result from 1.11. The rendering result might include pixels in its adjacent area. On the other hand, for example, rendering 9-patches should not be problematic since the graphics are continuous.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;例えば、テクスチャアトラス上のタイルを拡大縮小や回転をさせて描画する場合、 1.11 とは違った結果になりえます。描画結果が隣接する領域のピクセルを含むかもしれません。一方例えば、 9-patch で描画するような場合は、画像が連続しているので問題にはなりません。&lt;/p&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;The next image is an example of a sub-image and the graphics that are not continuous on the right side.&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;次の画像はサブ画像、および右側に連続しない画像を含む例です。&lt;/p&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;If necessary, you&#39;d need to create a texture atlas with paddings for each area.&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;必要ならば、テクスチャアトラスの各領域にパディングを追加する必要があります。&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/subimage/subimage.png&#34; width=&#34;360&#34;&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 lang=&#34;en&#34;&gt;Background&lt;/h2&gt;&#xA;&lt;h2 lang=&#34;ja&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;Ebiten has a feature called automatic texture atlases. Even if you create many &lt;code&gt;ebiten.Image&lt;/code&gt; objects, Ebiten tries to allocate them onto one texture atlas when possible. This is for an efficient rendering by reducing graphics commands sent to the GPU. Additionally, Ebiten users don&#39;t have to care about this. That&#39;s great!&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;Ebiten には自動テクスチャアトラスと呼ばれる機能があります。たとえ大量の &lt;code&gt;ebiten.Image&lt;/code&gt; を作ったとしても、 Ebiten はそれらを一つのテクスチャアトラス領域上に可能な限り確保しようとします。これによって GPU に送られるグラフィックス命令を減らすことができ、効果的な描画が実現できます。さらに、 Ebiten ユーザーはこのことを気にする必要がないのです。素晴らしい!&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/subimage/textureatlas.png&#34; width=&#34;300&#34;&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;When Ebiten rendered a part of a texture atlas, Ebiten did a hack not to expose the pixels in the adjacent areas. Without the hack, such adjacent pixels can be exposed, especially when the image is rendered with rotating or scaling. This is a general issue of graphics programming. As the hack, Ebiten did two things:&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;Ebiten がテクスチャアトラスの一部を描画するとき、 Ebiten は隣接する領域のピクセルを露出させないために、あるハック (小細工) をしていました。このハックがないと、特に画像を回転または拡大縮小させて描画したときに、隣接するピクセルが露出してしまいます。これは一般的なゲームプログラミングの問題です。ハックとして、 Ebiten は次の 2 つのことをしていました:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;Shift the texels a little bit.&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;テクセル (テクスチャの座標) をちょっとだけずらす&lt;/li&gt;&#xA;  &lt;li lang=&#34;en&#34;&gt;Check the source region in the shader.&lt;/li&gt;&#xA;  &lt;li lang=&#34;ja&#34;&gt;シェーダー内で描画元領域をチェックする&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;Both were problematic in terms of code maintainability, and the second hack was especially problematic. One reason is performance. This hack requires &#39;if&#39; branches in the shader programs and degrades the performance. Another thing is that this hack made it hard to define custom shaders, we are now introducing at 1.12. In the custom shaders, we wanted the users to take pixels from an image in an easy way, but we would need a special function for this purpose to perform this hack.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;両方ともコードのメンテナンス性の観点から問題でしたが、特に 2 つ目のハックが問題でした。一つの理由はパフォーマンスです。このハックのせいで if 分岐がシェーダーに追加されてしまい、パフォーマンスが落ちていました。もう一つの理由は、 1.12 に向けて導入中のカスタムシェーダーの定義が難しくなることです。カスタムシェーダー内で、画像からピクセルを取るときに簡単な方法で取れるのが望ましいのですが、このハックを実現するために特殊な関数などを用意しなければなりません。&lt;/p&gt;&#xA;&lt;h2 lang=&#34;en&#34;&gt;Removing the hacks&lt;/h2&gt;&#xA;&lt;h2 lang=&#34;ja&#34;&gt;ハックの削除&lt;/h2&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;We decided to remove these hacks. Instead, all the images are allocated onto the automatic texture atlas with 1px paddings. Even without the check of the source region, the outside pixels are transparent color and then this never violates the adjacent areas.&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;我々はこれらのハックを削除することにしました。代わりに全ての自動テクスチャアトラス上の画像は 1px のパディング付きで確保されます。描画元領域のチェックがなくとも、外側のピクセルは透明であり、隣接する領域を侵害してしまうことは決してないのです。&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/subimage/textureatlas_with_paddings.png&#34; width=&#34;300&#34;&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;However, Ebiten can treat sub-images, which are created by &lt;code&gt;(*ebiten.Image).SubImage&lt;/code&gt; function. They are parts of existing images. They cannot be allocated with paddings independently. There was an idea to allocate all the sub-images as independent images with paddings, but this was not good for performance and memory. If a user called &lt;code&gt;SubImage&lt;/code&gt; onto an image many times with 1px-shifted regions, each sub-image would be allocated.&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;しかし、 Ebiten はサブ画像も取り扱えます。サブ画像は &lt;code&gt;(*ebiten.Image).SubImage&lt;/code&gt; 関数で作られた画像です。これらは既存の画像の一部です。サブ画像はパディング付きで独立して確保することができません。全てのサブ画像をパディング付きの独立した画像として確保する案もありましたが、これはパフォーマンスとメモリの観点から良くありませんでした。もしユーザーが画像上で &lt;code&gt;SubImage&lt;/code&gt; を 1px ずつずらした領域で大量に呼んだ場合、それぞれのサブ画像分領域が確保されてしまいます。&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/subimage/subimage_textureatlas.png&#34; width=&#34;456&#34;&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;Then, we gave up to support such paddings around sub-images. As a result, rendering a sub-image can cause different results compared to 1.11. The adjacent area&#39;s pixels can be rendered, especially when the image is rotated or scaled.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;よって、サブ画像についてはパディングを追加するのは諦めました。結果として、サブ画像の描画は 1.11 と比べると違った結果を引き起こすことがあります。特に、画像を回転または拡大縮小させた場合、隣接する領域のピクセルが描画されることがあります。&lt;/p&gt;&#xA;&lt;h2 lang=&#34;en&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;h2 lang=&#34;ja&#34;&gt;例&lt;/h2&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;This is an example that causes bleeding edges by a scaled and rotated sub-image. You can see an unexpected green pixel on the right side. This rendering is tested on the latest master branch (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/tree/aee5d6d7084732e4d608ec72e9938e04ceddef5c&#34;&gt;aee5d6d7&lt;/a&gt;). The result depends on the machine&#39;s GPU.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;拡大と回転したサブ画像によって、隣接領域が見えてしまった描画の例です。右側に本来描画されるべきではない緑色のピクセルが描画されています。この描画は最新の master ブランチ (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/tree/aee5d6d7084732e4d608ec72e9938e04ceddef5c&#34;&gt;aee5d6d7&lt;/a&gt;) でテストされました。結果は GPU によって異なります。&lt;/p&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;pre data-codesrc=&#34;/go/blog/subimage/example.go&#34;&gt;&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/subimage/example.png&#34; width=&#34;320&#34;&gt;&lt;/p&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/subimage/example_enlarged.png&#34; width=&#34;276&#34;&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 lang=&#34;en&#34;&gt;What you should do&lt;/h2&gt;&#xA;&lt;h2 lang=&#34;ja&#34;&gt;あなたがすべきこと&lt;/h2&gt;&#xA;&lt;p lang=&#34;en&#34;&gt;If you have your own texture atlas, and the parts are rendered with scaling or rotating, and the parts&#39; graphics are not continuous, you need to add paddings for each part.&lt;/p&gt;&#xA;&lt;p lang=&#34;ja&#34;&gt;もし自作のテクスチャアトラスがあり、かつそれらの一部を拡大縮小または回転させて描画させ、かつそれらの画像が連続していない場合、パディングをそれぞれのパートに追加する必要があります。&lt;/p&gt;&#xA;</content>
  </entry>
  <entry>
    <title>v1.11.0 is released</title>
    <id>https://ebiten.org/blog/v1.11.0.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/v1.11.0.html"></link>
    <published>2020-04-13T00:00:00+09:00</published>
    <updated>2020-04-13T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1 lang=&#34;en&#34;&gt;v1.11.0 is released&lt;/h1&gt;&#xA;&lt;h1 lang=&#34;ja&#34;&gt;v1.11.0 がリリースされました&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2020-04-13&lt;/span&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;We are very happy to announce the release of v1.11.0 (&lt;a href=&#34;/documents/1.11.html&#34;&gt;Release Note&lt;/a&gt;). The new features are:&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;v1.11.0 がリリースされました! 詳しくは&lt;a href=&#34;/documents/1.11.html&#34;&gt;リリースノート&lt;/a&gt;を参照してください。新しい機能は次のとおりです:&lt;/p&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;&lt;code&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten?tab=doc#Game&#34;&gt;Game&lt;/a&gt;&lt;/code&gt; interface and &lt;code&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten?tab=doc#RunGame&#34;&gt;RunGame&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;&lt;code&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten?tab=doc#Game&#34;&gt;Game&lt;/a&gt;&lt;/code&gt; インターフェイスと &lt;code&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten?tab=doc#RunGame&#34;&gt;RunGame&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;Resizable window&lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;サイズ可変ウィンドウ&lt;/li&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;Window position&lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;ウィンドウ位置&lt;/li&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;Transparent screen&lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;透過スクリーン&lt;/li&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;Floating window&lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;常時最前面ウィンドウ&lt;/li&gt;&#xA;      &lt;li lang=&#34;en&#34;&gt;Capturing cursor&lt;/li&gt;&#xA;      &lt;li lang=&#34;ja&#34;&gt;カーソルキャプチャ&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;You can develop a desktop mascot application with these API. See &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/tree/1.11/examples/mascot/main.go&#34;&gt;the mascot example&lt;/a&gt;.&lt;/p&gt;&#xA;    &lt;p lang=&#34;ja&#34;&gt;これら API を使って、デスクトップマスコットアプリケーションが作れます。 &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/tree/1.11/examples/mascot/main.go&#34;&gt;mascot サンプル&lt;/a&gt;を参考にしてください。&lt;/p&gt;&#xA;    &lt;p lang=&#34;en&#34;&gt;Enjoy!&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;video controls autoplay src=&#34;/images/documents/1.11/mascot.mp4&#34; width=&#34;400&#34;&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;</content>
  </entry>
  <entry>
    <title>v1.10.5 is released</title>
    <id>https://ebiten.org/blog/v1.10.5.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/v1.10.5.html"></link>
    <published>2020-03-12T00:00:00+09:00</published>
    <updated>2020-03-12T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1&gt;v1.10.5 is released&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2020-03-12&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;We are very happy to announce the release of &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/releases/tag/v1.10.5&#34;&gt;v1.10.5&lt;/a&gt;. This includes only &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/milestone/37?closed=1&#34;&gt;bug fixes&lt;/a&gt; from v1.10.4.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;EbitenView class was not found in an Android library generated by &lt;code&gt;ebitenmobile&lt;/code&gt; on Windows (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/1096&#34;&gt;Issue #1096&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Enjoy!&lt;/p&gt;&#xA;</content>
  </entry>
  <entry>
    <title>v1.10.4 is released</title>
    <id>https://ebiten.org/blog/v1.10.4.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/v1.10.4.html"></link>
    <published>2020-02-28T00:00:00+09:00</published>
    <updated>2020-02-28T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1&gt;v1.10.4 is released&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2020-02-28&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;We are very happy to announce the release of &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/releases/tag/v1.10.4&#34;&gt;v1.10.4&lt;/a&gt;. This includes only &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/milestone/36?closed=1&#34;&gt;bug fixes&lt;/a&gt; from v1.10.3.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;Calling &lt;code&gt;(*Image).Set&lt;/code&gt;, &lt;code&gt;(*Image).Fill&lt;/code&gt; and &lt;code&gt;(*Image).Set&lt;/code&gt; in this order before the main loop didn&#39;t work correctly (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/1081&#34;&gt;Issue #1081&lt;/a&gt;).&lt;/li&gt;&#xA;  &lt;li&gt;&lt;code&gt;ebitenutil.NewImageFromFile&lt;/code&gt; was not defined on Wasm (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/1087&#34;&gt;Issue #1087&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Enjoy!&lt;/p&gt;&#xA;</content>
  </entry>
  <entry>
    <title>v1.10.3 is released</title>
    <id>https://ebiten.org/blog/v1.10.3.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/v1.10.3.html"></link>
    <published>2020-01-18T00:00:00+09:00</published>
    <updated>2020-01-18T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1&gt;v1.10.3 is released&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2020-01-18&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;We are very happy to announce the release of &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/releases/tag/v1.10.3&#34;&gt;v1.10.3&lt;/a&gt;. This includes only bug fixes from v1.10.2.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;&lt;code&gt;(*Image).Set&lt;/code&gt; is ignored before the main loop when &lt;code&gt;(*Image).DrawImage/DrawTriangles&lt;/code&gt; is called after &lt;code&gt;(*Image).Set&lt;/code&gt; (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/1052&#34;&gt;Issue #1052&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Enjoy!&lt;/p&gt;&#xA;</content>
  </entry>
  <entry>
    <title>v1.10.2 is released</title>
    <id>https://ebiten.org/blog/v1.10.2.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/v1.10.2.html"></link>
    <published>2019-12-26T00:00:00+09:00</published>
    <updated>2019-12-26T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1&gt;v1.10.2 is released&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2019-12-26&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;We are very happy to announce the release of &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/releases/tag/v1.10.2&#34;&gt;v1.10.2&lt;/a&gt;. This includes only bug fixes from v1.10.1.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;Compile error with Go 1.14 (beta) for Wasm (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/1024&#34;&gt;Issue #1024&lt;/a&gt;)&lt;/li&gt;&#xA;  &lt;li&gt;Avoid unnecessary copying: this is a performance improvement rather than a bug fix, but this was needed to pass on the test bots. (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/983&#34;&gt;Issue #983&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Enjoy!&lt;/p&gt;&#xA;</content>
  </entry>
  <entry>
    <title>New API to make a resizable window</title>
    <id>https://ebiten.org/blog/resizable.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/resizable.html"></link>
    <published>2019-12-23T00:00:00+09:00</published>
    <updated>2019-12-23T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1&gt;New API to make a resizable window&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2019-12-23&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2&gt;TL;DR&lt;/h2&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p&gt;We have introduced these new APIs in the master branch:&lt;/p&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#Game&#34;&gt;&lt;code&gt;Game&lt;/code&gt; interface&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#RunGame&#34;&gt;&lt;code&gt;RunGame&lt;/code&gt; function&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#SetWindowResizable&#34;&gt;&lt;code&gt;SetWindowResizable&lt;/code&gt; function&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#IsWindowResizable&#34;&gt;&lt;code&gt;IsWindowResizable&lt;/code&gt; function&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#SetWindowSize&#34;&gt;&lt;code&gt;SetWindowSize&lt;/code&gt; function&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#WindowSize&#34;&gt;&lt;code&gt;WindowSize&lt;/code&gt; function&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;    &lt;p&gt;You can create a resizable window by calling &lt;code&gt;SetWindowResizable(true)&lt;/code&gt;. You can specify how the screen size will be updated after resizing the window by &lt;code&gt;Game&lt;/code&gt;&#39;s &lt;code&gt;Layout&lt;/code&gt; function. The notion of the screen scale is deprecated, which means that you should not have to care about the screen scale.&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p class=&#34;img&#34;&gt;&lt;video controls autoplay src=&#34;/images/blog/resizable/demo.mp4&#34; width=&#34;400&#34;&gt;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2&gt;Background&lt;/h2&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p&gt;There has been &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/320&#34;&gt;a request&lt;/a&gt; to have a resizable window by the user for a few years. While implementation is not difficult, we hesitated to introduce the API because there is no clear answer what is the best behavior. When a window size is changed by the user, should the game (logical) screen also be resized, or be the same but the scale should be updated? Both would make sense and be useful. There was no clear answer which is better.&lt;/p&gt;&#xA;    &lt;p&gt;Changing the window size is actually a new notion to Ebiten. Ebiten has &lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#SetScreenSize&#34;&gt;&lt;code&gt;SetScreenSize&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#SetScreenScale&#34;&gt;&lt;code&gt;SetScreenScale&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;SetScreenSize&lt;/code&gt; changes the logical screen size, and &lt;code&gt;SetScreenScale&lt;/code&gt; changes the scale without changing the logical size. Both change the window size as a side effect. Both work only with window mode on desktops, and not with fullscreen mode or browsers or mobiles. There is no API to change the window size directly so far.&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/resizable/which.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;When the window size is changed, should the game screen size be changed, or be just scaled?&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;!--p&gt;In environments that don&#39;t have windows like browsers or mobiles, the scale is automatically adjusted with the outside size. The &#39;outside&#39; is a body element on borwsers, and the view-element size on mobiles. Can we extend this idea to the desktop windows?&lt;/p--&gt;&#xA;&lt;h2&gt;The new interface &lt;code&gt;Game&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;We have introduced a brand new interface &lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#Game&#34;&gt;&lt;code&gt;Game&lt;/code&gt;&lt;/a&gt;, and a new function &lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#RunGame&#34;&gt;&lt;code&gt;RunGame&lt;/code&gt;&lt;/a&gt; that takes a &lt;code&gt;Game&lt;/code&gt;, in the master branch.&lt;/p&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;pre data-codesrc=&#34;/go/blog/resizable/game.go&#34;&gt;&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p&gt;&lt;code&gt;Game&lt;/code&gt; has &lt;code&gt;Update&lt;/code&gt; function and &lt;code&gt;Layout&lt;/code&gt; function. &lt;code&gt;Update&lt;/code&gt; proceeds the game state. &lt;code&gt;Update&lt;/code&gt; is called every frame (per 1/60 [s] by default). This is the same as the function given to &lt;code&gt;Run&lt;/code&gt;. &lt;code&gt;Layout&lt;/code&gt; calculates the logical screen size based on the given outside size. The unit is device-independent pixels. The outside size is a window size on desktops (window mode). The scale is automatically adjusted based on the returned screen scale.&lt;/p&gt;&#xA;    &lt;p&gt;Actually the mobile environments already has &lt;a href=&#34;/documents/mobile.html&#34;&gt;the same interface&lt;/a&gt;.&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;pre data-codesrc=&#34;/go/blog/resizable/rungame.go&#34;&gt;&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p&gt;&lt;code&gt;RunGame&lt;/code&gt; is a very similar function to &lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#Run&#34;&gt;&lt;code&gt;Run&lt;/code&gt;&lt;/a&gt;, but takes a &lt;code&gt;Game&lt;/code&gt; instead of an updating function. &lt;code&gt;RunGame&lt;/code&gt; does not determine the window size, so you have to call &lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#SetWindowSize&#34;&gt;&lt;code&gt;SetWindowSize&lt;/code&gt;&lt;/a&gt; before &lt;code&gt;RunGame&lt;/code&gt; if necessary. Otherwise, a default window size is adopted. &lt;code&gt;RunGame&lt;/code&gt; also does not take a window title, so you have to call &lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#SetWindowTitle&#34;&gt;&lt;code&gt;SetWindowTitle&lt;/code&gt;&lt;/a&gt; instead.&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h3&gt;&lt;code&gt;Layout&lt;/code&gt; function&lt;/h3&gt;&#xA;&lt;p&gt;Let&#39;s see how to implement &lt;code&gt;Layout&lt;/code&gt; function.&lt;/p&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;pre&gt;&lt;code&gt;func (g *Game) Layout(outsideWidth, outsideHeight int)&#xA;        (screenWidth, screenHeight int) {&#xA;    return outsideWidth, outsideHeight&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p&gt;If &lt;code&gt;Layout&lt;/code&gt; returns the outside size without changing them, the game screen size is adjusted to the outside size without changing the scale.&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;pre&gt;&lt;code&gt;func (g *Game) Layout(outsideWidth, outsideHeight int)&#xA;        (screenWidth, screenHeight int) {&#xA;    return 320, 240&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p&gt;If &lt;code&gt;Layout&lt;/code&gt; returns ignores the outside size and returns a fixed size, the game screen size is not changed but the screen scale is adjusted instead.&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;p&gt;&lt;code&gt;Layout&lt;/code&gt; implementation now can determine which way the game adopts. Besides, you can do more complex things by implementing your own logic!&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/resizable/layout.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;code&gt;Layout&lt;/code&gt; implementation can determine which way the game adopts.&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2&gt;Making a resizable window&lt;/h2&gt;&#xA;&lt;p&gt;To make a window resizable, call &lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#SetWindowResizable&#34;&gt;&lt;code&gt;SetWindowResizable&lt;/code&gt;&lt;/a&gt; function with &lt;code&gt;true&lt;/code&gt;. That&#39;s it! You can call it both before and after &lt;code&gt;RunGame&lt;/code&gt;. After &lt;code&gt;SetWindowResizable(true)&lt;/code&gt;, the player can resize the window by dragging. The user can even maximize the window.&lt;/p&gt;&#xA;&lt;p&gt;Note that &lt;code&gt;SetWindowResizable(true)&lt;/code&gt; does not work with &lt;code&gt;Run&lt;/code&gt;, but &lt;code&gt;RunGame&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#SetWindowSize&#34;&gt;&lt;code&gt;SetWindowSize&lt;/code&gt;&lt;/a&gt; is an API to change the window size directly, and this has nothing to do with &lt;code&gt;SetWindowResizable&lt;/code&gt;. No matter what the window is resizable (by the user), &lt;code&gt;SetWindowSize&lt;/code&gt; works.&lt;/p&gt;&#xA;&lt;p&gt;To summarize, the new way to run the game will be in the next diagram. The new way is a little redundant compared to the current way, but the new way is more flexible for a resizable window.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA;  &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/resizable/compare.png&#34; width=&#34;700&#34;&gt;&lt;/p&gt;&#xA;  &lt;figcaption&gt;Comparison between the current way (&lt;code&gt;Run&lt;/code&gt;) and the new way (&lt;code&gt;RunGame&lt;/code&gt;).&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;You can see actual examples in &lt;code&gt;examples/widowsize&lt;/code&gt;. A flag &lt;code&gt;-autoadjusting&lt;/code&gt; switches the &lt;code&gt;Layout&lt;/code&gt; function implementation.&lt;/p&gt;&#xA;&lt;h2&gt;Scale&lt;/h2&gt;&#xA;&lt;p&gt;After the &lt;code&gt;RunGame&lt;/code&gt; world, the notion of the screen scale is deprecated. You don&#39;t have to care how much the screen is scaled. With the new APIs, Ebiten&#39;s game screen is automatically scaled along with the outside world (a window on desktop for example). Actually, the game was automatically scaled on browsers and mobiles no matter what the specified screen scale was. The notion of scale will be incognitive from the developer.&lt;/p&gt;&#xA;&lt;h3&gt;Deprecated functions&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#ScreenScale&#34;&gt;&lt;code&gt;ScreenScale&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;s&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#ScreenSizeInFullscreen&#34;&gt;&lt;code&gt;ScreenSizeInFullscreen&lt;/code&gt;&lt;/a&gt;&lt;/s&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#SetScreenScale&#34;&gt;&lt;code&gt;SetScreenScale&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#SetScreenSize&#34;&gt;&lt;code&gt;SetScreenSize&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;EDIT (2020-03-22): &lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#ScreenSizeInFullscreen&#34;&gt;&lt;code&gt;ScreenSizeInFullscreen&lt;/code&gt;&lt;/a&gt; is now non-deprecated. This function is useful in limited use cases like developing a desktop mascot.&lt;/p&gt;&#xA;&lt;p&gt;These functions still work, but only with &lt;code&gt;Run&lt;/code&gt;. &lt;code&gt;SetScreenSize&lt;/code&gt; is deprecated since the new window size is calculated based on the current screen scale. Instead of this, you can use &lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten#SetWindowSize&#34;&gt;&lt;code&gt;SetWindowSize&lt;/code&gt;&lt;/a&gt; to change the window size directly. Of course, this works only on desktops.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Run&lt;/code&gt; is not deprecated yet, but we might deprecate this in the near future. &lt;code&gt;Run&lt;/code&gt; is still useful as a shorthand.&lt;/p&gt;&#xA;</content>
  </entry>
  <entry>
    <title>Ebiten in 2019</title>
    <id>https://ebiten.org/blog/2019.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/2019.html"></link>
    <published>2019-12-04T00:00:00+09:00</published>
    <updated>2019-12-04T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1&gt;Ebiten in 2019&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2019-12-04&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;It&#39;s been 6 years since I started to develop Ebiten. This article is a retrospective of Ebiten in 2019.&lt;/p&gt;&#xA;&lt;h2&gt;TL;DR&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;I&#39;m happy that a game in Ebiten (Bear&#39;s Restaurant) received some awards.&lt;/li&gt;&#xA;  &lt;li&gt;There are chances to contribute to Go, especially to a relatively minor tools like gomobile.&lt;/li&gt;&#xA;  &lt;li&gt;A game library will never be improved if there are no users. In 2019, we increased use cases of Ebiten and turn a feedback loop.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2&gt;January&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;I think I was working on Ebiten based on feedbacks by &#34;Bear&#39;s Restaurant&#34;&#39;s author.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2&gt;February&lt;/h2&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;&#34;&lt;a href=&#34;https://daigostudio.com/bearsrestaurant/&#34;&gt;Bear&#39;s Restaurant&lt;/a&gt;&#34; was released.&#xA;        &lt;ul&gt;&#xA;          &lt;li&gt;The author is &lt;a href=&#34;https://twitter.com/daigo&#34;&gt;Daigo&lt;/a&gt;.&lt;/li&gt;&#xA;          &lt;li&gt;This game is made with an in-house game engine written in Ebiten.&lt;/li&gt;&#xA;          &lt;li&gt;As far as I know, Bear&#39;s Restaurant has reached 400K downloads.&lt;/li&gt;&#xA;          &lt;li&gt;After releasing Bear&#39;s Restaurant, we needed to address many issues in mobile environments (e.g. &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/622&#34;&gt;there was an unexpected line on the screen in Xperia&lt;/a&gt;). I have fought against many bug reports this year.&lt;/li&gt;&#xA;        &lt;/ul&gt;&#xA;      &lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://blog.golang.org/go1.12&#34;&gt;Go 1.12&lt;/a&gt; was released. This includes &lt;code&gt;&lt;a href=&#34;https://github.com/golang/go/issues/28434&#34;&gt;Syscall18&lt;/a&gt;&lt;/code&gt; I implemented. This was needed for OpenGL bindings on Windows.&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/2019/bearsrestaurant.png&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://daigostudio.com/bearsrestaurant/&#34;&gt;Bear’s Restaurant, Odencat Inc., 2019&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2&gt;March&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;Released &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/releases/tag/v1.9.0&#34;&gt;Ebiten v1.9.0&lt;/a&gt;. The new features are no-Cgo on Windows, &lt;a href=&#34;https://developer.apple.com/metal/&#34;&gt;Metal&lt;/a&gt; on macOS, and so on.&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;For the Metal part, I used &lt;a href=&#34;https://dmitri.shuralyov.com/gpu/mtl&#34;&gt;Dmitri&#39;s source code&lt;/a&gt; with Dmitri&#39;s permission.&lt;/li&gt;&#xA;      &lt;li&gt;The reason why I implemented Metal version is because &lt;a href=&#34;https://developer.apple.com/documentation/macos_release_notes/macos_mojave_10_14_release_notes?language=objc&#34;&gt;Apple was trying to deprecate OpenGL&lt;/a&gt;.&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;Started to implement &lt;a href=&#34;https://github.com/gopherjs/gopherjs/issues/887#issuecomment-468898721&#34;&gt;Go 1.12 port&lt;/a&gt; of GopherJS.&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/hajimehoshi/status/1108703311887097856&#34;&gt;Launched ebiten.org&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2&gt;April&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/neguse&#34;&gt;neguse&lt;/a&gt; developed a game &lt;a href=&#34;https://ldjam.com/events/ludum-dare/44/cutnalign&#34;&gt;cut’n’align&lt;/a&gt; in Ebiten (&lt;a href=&#34;https://www.neguse.dev/post/184550335311/ludum-dare-44%E3%81%ABsubmit%E3%81%97%E3%81%9F&#34;&gt;the article about this game in Japanese&lt;/a&gt;).&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;I improved the audio part of Ebiten based on neguse&#39;s feedbacks.&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2&gt;May&lt;/h2&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://daigostudio.com/fishingparadise&#34;&gt;Fishing Paradiso&lt;/a&gt; was released.&#xA;        &lt;ul&gt;&#xA;          &lt;li&gt;This game is made with the same engine Bear&#39;s Restaurant uses.&lt;/li&gt;&#xA;          &lt;li&gt;As far as I know, Fishing Paradiso has reached 480K downloads. This is the most downloaded mobile game in Go so far.&lt;/li&gt;&#xA;        &lt;/ul&gt;&#xA;      &lt;/li&gt;&#xA;      &lt;li&gt;Gave a presentation &lt;a href=&#34;https://docs.google.com/presentation/d/e/2PACX-1vROsKT1RYDNWLI0dPEjH8EbQTMlwHfSHcKAF-7qwZ8mkFTL5WvdxKgBZ4V35-UHTHVAJeZVRVFu2SkV/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p&#34;&gt;&#34;Mobile Game Development in Go&#34; (Japanese)&lt;/a&gt; at &lt;a href=&#34;https://golangtokyo.connpass.com/event/129067/&#34;&gt;golang.tokyo #24&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/2019/fishingparadiso.png&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://daigostudio.com/fishingparadise/&#34;&gt;Fishing Paradiso, Odencat Inc., 2019&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2&gt;June&lt;/h2&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;Bear&#39;s Restaurant received Top3 award and Avex award at &lt;a href=&#34;https://indiegamesshowcase.withgoogle.com/intl/ja_jp/&#34;&gt;Google Play Indie Games Festival 2019&lt;/a&gt;. Congratulations!&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;この度くまレスがIndie Game FestivalでTop3+Avex賞受賞となりました。Googleおよび関係者の方々、素晴らしいコンテストを開いていただきありがとうございました。Googleのインディーゲームへの本気度と愛がつたわるいいイベントでした！&lt;a href=&#34;https://t.co/5HEJmOjy8Z&#34;&gt;https://t.co/5HEJmOjy8Z&lt;/a&gt;&lt;/p&gt;&amp;mdash; Daigo (@daigo) &lt;a href=&#34;https://twitter.com/daigo/status/1145124687019556865?ref_src=twsrc%5Etfw&#34;&gt;June 30, 2019&lt;/a&gt;&lt;/blockquote&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2&gt;July&lt;/h2&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;Gave a LT &#34;&lt;a href=&#34;https://www.youtube.com/watch?v=zRgmXiO1el4&#34;&gt;Mobile Game Development in Go&lt;/a&gt;&#34; at &lt;a href=&#34;https://www.gophercon.com&#34;&gt;GopherCon 2019&lt;/a&gt;.&#xA;        &lt;ul&gt;&#xA;          &lt;li&gt;The summary is that &#34;you can develop decent mobile games in Go&#34;. &lt;/li&gt;&#xA;          &lt;li&gt;Ebiten was introduced also at &#34;&lt;a href=&#34;https://youtu.be/Dxs4LGjmEL4?t=1240&#34;&gt;Get Going with WebAssembly&lt;/a&gt;&#34; by Johan Brandhorst.&lt;/li&gt;&#xA;        &lt;/ul&gt;&#xA;      &lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://odencat.com&#34;&gt;Odencat Inc.&lt;/a&gt; was established by Daigo. For now, this company’s focus is to sell games developed with Ebiten.&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://t.co/GHT4O7HSjg&#34;&gt;https://t.co/GHT4O7HSjg&lt;/a&gt;&lt;/p&gt;&amp;mdash; Hajime Hoshi (星一) (@hajimehoshi) &lt;a href=&#34;https://twitter.com/hajimehoshi/status/1166358133092081665?ref_src=twsrc%5Etfw&#34;&gt;August 27, 2019&lt;/a&gt;&lt;/blockquote&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2&gt;August&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;Started to implement &lt;a href=&#34;https://github.com/golang/go/issues/27234#issuecomment-518233673&#34;&gt;enabling Go modules in gomobile&lt;/a&gt;.&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;At GopherCon, I talked to the Go team members including &lt;a href=&#34;https://github.com/aclements&#34;&gt;Austin&lt;/a&gt; and was told: &#34;why don&#39;t you do that?&#34;&lt;/li&gt;&#xA;      &lt;li&gt;Ebiten is a heavy user of gomobile, and enabling Go modules is a critical feature. I run for a contributor.&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2&gt;September&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;https://blog.golang.org/go1.13&#34;&gt;Go 1.13&lt;/a&gt; was released.&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;This included &lt;a href=&#34;https://github.com/golang/go/issues/31980&#34;&gt;a breaking change in &lt;code&gt;syscall/js&lt;/code&gt;&lt;/a&gt;. Ebiten already supported this before releasing.&lt;/li&gt;&#xA;      &lt;li&gt;By the way, Go 1.14 plans to add &lt;a href=&#34;https://github.com/golang/go/issues/35111&#34;&gt;another breaking change&lt;/a&gt; (&lt;code&gt;==&lt;/code&gt; will not be available to compare &lt;code&gt;js.Value&lt;/code&gt;s). I plan to support this.&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2&gt;October&lt;/h2&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://opendiablo2.com&#34;&gt;OpenDiablo2&lt;/a&gt; adopted Ebiten.&#xA;        &lt;ul&gt;&#xA;          &lt;li&gt;Before adopting Ebiten, OpenDiablo2 used C# or other languages.&lt;/li&gt;&#xA;          &lt;li&gt;OpenDiablo2 is a project to reimplement Diablo2, and this uses resources of the official Diablo2 locally installed.&lt;/li&gt;&#xA;          &lt;li&gt;OpenDiablo2 utilizes Ebiten so heavily as never before and they found some performance issues in Ebiten. The author &lt;a href=&#34;https://github.com/essial&#34;&gt;Essial&lt;/a&gt; and I are discussing and trying to improve Ebiten&#39;s performance.&lt;/li&gt;&#xA;        &lt;/ul&gt;&#xA;      &lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/2019/opendiablo2.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;Screenshot on Hajime&#39;s local machine&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2&gt;November&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;Released &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/releases/tag/v1.10.0&#34;&gt;Ebiten v1.10.0&lt;/a&gt;. The new features are iOS Metal, &lt;code&gt;ebitenmobile&lt;/code&gt; command, and so on.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2&gt;December&lt;/h2&gt;&#xA;&lt;div class=&#34;grid-container&#34;&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;https://odencat.com/snowman&#34;&gt;Snowman Story&lt;/a&gt; is planned to be released.&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;grid-item-2&#34;&gt;&#xA;    &lt;figure&gt;&#xA;      &lt;p class=&#34;img&#34;&gt;&lt;img src=&#34;/images/blog/2019/snowmanstory.png&#34;&gt;&lt;/p&gt;&#xA;      &lt;figcaption&gt;&lt;a href=&#34;https://odencat.com/snowman/&#34;&gt;Snowman Story, Odencat Inc., 2019&lt;/a&gt;&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2&gt;Ebiten in 2020 and after&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;I hope supporting Go modules in gomobile would be finished.&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;Then I&#39;d be able to release Ebiten v2.0.&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;For adding features, the highest priority things are what actual games want.&#xA;    &lt;ul&gt;&#xA;      &lt;li&gt;I&#39;ll continue to discuss with Daigo and the people in OpenDiablo2.&lt;/li&gt;&#xA;      &lt;li&gt;Shaders and vector graphics are still in the task queue.&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;More examples and documents are needed to increase the users.&#xA;    &lt;ul&gt;What about offering easy-to-use assets and examples that use them?&lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;I&#39;d like to write a book if I have bandwidth.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</content>
  </entry>
  <entry>
    <title>v1.10.1 is released</title>
    <id>https://ebiten.org/blog/v1.10.1.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/v1.10.1.html"></link>
    <published>2019-11-24T00:00:00+09:00</published>
    <updated>2019-11-24T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1&gt;v1.10.1 is released&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2019-11-24&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;We are very happy to announce the release of &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/releases/tag/v1.10.1&#34;&gt;v1.10.1&lt;/a&gt;. This includes only bug fixes from v1.10.0.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;&lt;code&gt;RepalcePixels&lt;/code&gt; might be very slow unexpectedly (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/977&#34;&gt;Issue #977&lt;/a&gt;).&lt;/li&gt;&#xA;  &lt;li&gt;CPU was busy when the window is in another workspace (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/982&#34;&gt;Issue #982&lt;/a&gt;).&lt;/li&gt;&#xA;  &lt;li&gt;Delayed sound on macOS / iOS (&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/issues/975&#34;&gt;Issue #975&lt;/a&gt;).&lt;/li&gt;&#xA;  &lt;li&gt;etc.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Enjoy!&lt;/p&gt;&#xA;</content>
  </entry>
  <entry>
    <title>Hello!</title>
    <id>https://ebiten.org/blog/hello.html</id>
    <link rel="alternate" href="https://ebiten.org/blog/hello.html"></link>
    <published>2019-11-22T00:00:00+09:00</published>
    <updated>2019-11-22T00:00:00+09:00</updated>
    <author>
      <name>Hajime Hoshi</name>
      <uri>https://hajimehoshi.com</uri>
      <email>hajimehoshi@gmail.com</email>
    </author>
    <content type="html">&lt;h1&gt;Hello!&lt;/h1&gt;&#xA;&lt;p class=&#34;meta&#34;&gt;Hajime Hoshi&lt;br&gt;&lt;span id=&#34;meta-created&#34;&gt;2019-11-22&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;Hello! This is the very first article of the blog.&lt;/p&gt;&#xA;&lt;p&gt;I&#39;d like to share information about Ebiten e.g., new releases or new updates.&lt;/p&gt;&#xA;&lt;p&gt;I&#39;m now preparing an Atom feed. Stay tuned :-)&lt;/p&gt;&#xA;</content>
  </entry>
</feed>